{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  normalizeAppPath: null,\n  normalizeRscURL: null\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  normalizeAppPath: function () {\n    return normalizeAppPath;\n  },\n  normalizeRscURL: function () {\n    return normalizeRscURL;\n  }\n});\n\nconst _ensureleadingslash = require(\"../../page-path/ensure-leading-slash\");\n\nconst _segment = require(\"../../segment\");\n\nfunction normalizeAppPath(route) {\n  return (0, _ensureleadingslash.ensureLeadingSlash)(route.split('/').reduce((pathname, segment, index, segments) => {\n    // Empty segments are ignored.\n    if (!segment) {\n      return pathname;\n    } // Groups are ignored.\n\n\n    if ((0, _segment.isGroupSegment)(segment)) {\n      return pathname;\n    } // Parallel segments are ignored.\n\n\n    if (segment[0] === '@') {\n      return pathname;\n    } // The last segment (if it's a leaf) should be ignored.\n\n\n    if ((segment === 'page' || segment === 'route') && index === segments.length - 1) {\n      return pathname;\n    }\n\n    return pathname + \"/\" + segment;\n  }, ''));\n}\n\nfunction normalizeRscURL(url) {\n  return url.replace(/\\.rsc($|\\?)/, // $1 ensures `?` is preserved\n  '$1');\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;EAsBgBA,gBAAgB;WAAhBA;;EAmCAC,eAAe;WAAfA;;;;oCAzDmB;;yBACJ;;AAqBxB,SAASD,gBAAT,CAA0BE,KAA1B,EAAuC;EAC5C,OAAOC,4CACLD,MAAME,KAANF,CAAY,GAAZA,EAAiBG,MAAjBH,CAAwB,CAACI,QAAD,EAAWC,OAAX,EAAoBC,KAApB,EAA2BC,QAA3B,KAA2BA;IACjD;IACA,IAAI,CAACF,OAAL,EAAc;MACZ,OAAOD,QAAP;IACF,CAJiDG,CAMjD;;;IACA,IAAIC,6BAAeH,OAAfG,CAAJ,EAA6B;MAC3B,OAAOJ,QAAP;IACF,CATiDG,CAWjD;;;IACA,IAAIF,OAAO,CAAC,CAAD,CAAPA,KAAe,GAAnB,EAAwB;MACtB,OAAOD,QAAP;IACF,CAdiDG,CAgBjD;;;IACA,IACE,CAACF,YAAY,MAAZA,IAAsBA,YAAY,OAAnC,KACAC,UAAUC,SAASE,MAATF,GAAkB,CAF9B,EAGE;MACA,OAAOH,QAAP;IACF;;IAEA,OAAOA,QAAGA,GAAS,GAAZ,GAAeC,OAAtB;EACF,CAzBAL,EAyBG,EAzBHA,CADKC,CAAP;AA4BF;;AAMO,SAASF,eAAT,CAAyBW,GAAzB,EAAoC;EACzC,OAAOA,IAAIC,OAAJD,CACL,aADKA,EAEL;EACA,IAHKA,CAAP;AAKF","names":["normalizeAppPath","normalizeRscURL","route","ensureLeadingSlash","split","reduce","pathname","segment","index","segments","isGroupSegment","length","url","replace"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\router\\utils\\app-paths.ts"],"sourcesContent":["import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n"]},"metadata":{},"sourceType":"script"}