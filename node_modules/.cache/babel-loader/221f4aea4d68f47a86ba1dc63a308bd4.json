{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"isLocalURL\", {\n  enumerable: true,\n  get: function () {\n    return isLocalURL;\n  }\n});\n\nconst _utils = require(\"../../utils\");\n\nconst _hasbasepath = require(\"../../../../client/has-base-path\");\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (!(0, _utils.isAbsoluteUrl)(url)) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils.getLocationOrigin)();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && (0, _hasbasepath.hasBasePath)(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}","map":{"version":3,"mappings":";;;;;+BAMgBA;kBAAAA;;WAAAA;;AAAAA;;uBANiC;;6BACrB;;AAKrB,SAASA,UAAT,CAAoBC,GAApB,EAA+B;EACpC;EACA,IAAI,CAACC,0BAAcD,GAAdC,CAAL,EAAyB,OAAO,IAAP;;EACzB,IAAI;IACF;IACA,MAAMC,iBAAiBC,+BAAvB;IACA,MAAMC,WAAW,IAAIC,GAAJ,CAAQL,GAAR,EAAaE,cAAb,CAAjB;IACA,OAAOE,SAASE,MAATF,KAAoBF,cAApBE,IAAsCG,8BAAYH,SAASI,QAArBD,CAA7C;EACF,CALA,CAKE,OAAOE,CAAP,EAAU;IACV,OAAO,KAAP;EACF;AACF","names":["isLocalURL","url","isAbsoluteUrl","locationOrigin","getLocationOrigin","resolved","URL","origin","hasBasePath","pathname","_"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\router\\utils\\is-local-url.ts"],"sourcesContent":["import { isAbsoluteUrl, getLocationOrigin } from '../../utils'\nimport { hasBasePath } from '../../../../client/has-base-path'\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (!isAbsoluteUrl(url)) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n"]},"metadata":{},"sourceType":"script"}