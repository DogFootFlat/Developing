{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ListActionTypes } from './listActions.types';\n/**\n * Looks up the next valid item to highlight within the list.\n *\n * @param currentIndex The index of the start of the search.\n * @param lookupDirection Whether to look for the next or previous item.\n * @param items The array of items to search.\n * @param includeDisabledItems Whether to include disabled items in the search.\n * @param isItemDisabled A function that determines whether an item is disabled.\n * @param wrapAround Whether to wrap around the list when searching.\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\n */\n\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n\n  let nextFocus = currentIndex;\n\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\n\n\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context; // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround); // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n\n  return items[nextIndex] ?? null;\n}\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\n\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n\n    return [item];\n  } // The toggled item is selected; remove it from the selection.\n\n\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  } // The toggled item is not selected - add it to the selection.\n\n\n  return [...selectedValues, item];\n}\n/**\n * Handles item selection in a list.\n *\n * @param item - The item to be selected.\n * @param state - The current state of the list.\n * @param context - The context of the list action.\n * @returns The new state of the list after the item has been selected, or the original state if the item is disabled.\n */\n\nexport function handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  } // if the item is already selected, remove it from the selection, otherwise add it\n\n\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\n\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n\n  switch (key) {\n    case 'Home':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      });\n\n    case 'End':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      });\n\n    case 'PageUp':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      });\n\n    case 'PageDown':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      });\n\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n\n      return handleItemSelection(state.highlightedValue, state, context);\n\n    default:\n      break;\n  }\n\n  return state;\n}\n\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\n\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  const text = stringifyItem(nextFocus)?.trim().toLowerCase();\n\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n\n  return text.indexOf(searchString) === 0;\n}\n\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    } // Move to the next element.\n\n\n    nextItem = moveHighlight(nextItem, 1, context);\n  } // No item matches the text search criteria\n\n\n  return state;\n}\n\nfunction handleItemsChange(items, previousItems, state, context) {\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n\n  if (state.highlightedValue != null) {\n    newHighlightedValue = items.find(item => itemComparer(item, state.highlightedValue)) ?? null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  } // exclude selected values that are no longer in the items list\n\n\n  const selectedValues = state.selectedValues ?? [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\n\nfunction handleResetHighlight(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, 'reset', context)\n  });\n}\n\nfunction handleHighlightLast(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, 'end', context)\n  });\n}\n\nfunction handleClearSelection(state, context) {\n  return _extends({}, state, {\n    selectedValues: [],\n    highlightedValue: moveHighlight(null, 'reset', context)\n  });\n}\n\nexport function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n\n    case ListActionTypes.highlightLast:\n      return handleHighlightLast(state, context);\n\n    case ListActionTypes.clearSelection:\n      return handleClearSelection(state, context);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["_extends","ListActionTypes","findValidItemToHighlight","currentIndex","lookupDirection","items","includeDisabledItems","isItemDisabled","wrapAround","length","every","item","itemIndex","nextFocus","nextFocusDisabled","moveHighlight","previouslyHighlightedValue","offset","context","disableListWrap","disabledItemsFocusable","itemComparer","focusManagement","defaultHighlightedIndex","maxIndex","previouslyHighlightedIndex","findIndex","nextIndexCandidate","newIndex","Math","abs","nextIndex","toggleSelection","selectedValues","selectionMode","some","sv","filter","handleItemSelection","state","i","newSelectedValues","highlightedValue","handleKeyDown","key","previouslySelectedValue","orientation","pageSize","handleBlur","textCriteriaMatches","searchString","stringifyItem","text","trim","toLowerCase","indexOf","handleTextNavigation","getItemAsString","startWithCurrentItem","nextItem","index","handleItemsChange","previousItems","newHighlightedValue","find","selectedValue","handleResetHighlight","handleHighlightLast","handleClearSelection","listReducer","action","type","keyDown","itemClick","blur","textNavigation","itemsChange","resetHighlight","highlightLast","clearSelection"],"sources":["C:/OtpishiAI/node_modules/@mui/joy/node_modules/@mui/base/useList/listReducer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ListActionTypes } from './listActions.types';\n/**\n * Looks up the next valid item to highlight within the list.\n *\n * @param currentIndex The index of the start of the search.\n * @param lookupDirection Whether to look for the next or previous item.\n * @param items The array of items to search.\n * @param includeDisabledItems Whether to include disabled items in the search.\n * @param isItemDisabled A function that determines whether an item is disabled.\n * @param wrapAround Whether to wrap around the list when searching.\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\n */\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n  let nextFocus = currentIndex;\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context;\n\n  // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\n\n  // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n  return items[nextIndex] ?? null;\n}\n\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n    return [item];\n  }\n\n  // The toggled item is selected; remove it from the selection.\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  }\n\n  // The toggled item is not selected - add it to the selection.\n  return [...selectedValues, item];\n}\n\n/**\n * Handles item selection in a list.\n *\n * @param item - The item to be selected.\n * @param state - The current state of the list.\n * @param context - The context of the list action.\n * @returns The new state of the list after the item has been selected, or the original state if the item is disabled.\n */\nexport function handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  }\n\n  // if the item is already selected, remove it from the selection, otherwise add it\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n  switch (key) {\n    case 'Home':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      });\n    case 'End':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      });\n    case 'PageUp':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      });\n    case 'PageDown':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      });\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n      return handleItemSelection(state.highlightedValue, state, context);\n    default:\n      break;\n  }\n  return state;\n}\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  const text = stringifyItem(nextFocus)?.trim().toLowerCase();\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n  return text.indexOf(searchString) === 0;\n}\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    }\n    // Move to the next element.\n    nextItem = moveHighlight(nextItem, 1, context);\n  }\n\n  // No item matches the text search criteria\n  return state;\n}\nfunction handleItemsChange(items, previousItems, state, context) {\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n  if (state.highlightedValue != null) {\n    newHighlightedValue = items.find(item => itemComparer(item, state.highlightedValue)) ?? null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  }\n\n  // exclude selected values that are no longer in the items list\n  const selectedValues = state.selectedValues ?? [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\nfunction handleResetHighlight(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, 'reset', context)\n  });\n}\nfunction handleHighlightLast(state, context) {\n  return _extends({}, state, {\n    highlightedValue: moveHighlight(null, 'end', context)\n  });\n}\nfunction handleClearSelection(state, context) {\n  return _extends({}, state, {\n    selectedValues: [],\n    highlightedValue: moveHighlight(null, 'reset', context)\n  });\n}\nexport function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n    case ListActionTypes.highlightLast:\n      return handleHighlightLast(state, context);\n    case ListActionTypes.clearSelection:\n      return handleClearSelection(state, context);\n    default:\n      return state;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}