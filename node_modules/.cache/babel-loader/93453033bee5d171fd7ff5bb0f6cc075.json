{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\n\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\n\nconst _jsxruntime = require(\"react/jsx-runtime\");\n\nconst _react = /*#__PURE__*/_interop_require_default._(require(\"react\"));\n\nconst _resolvehref = require(\"./resolve-href\");\n\nconst _islocalurl = require(\"../shared/lib/router/utils/is-local-url\");\n\nconst _formaturl = require(\"../shared/lib/router/utils/format-url\");\n\nconst _utils = require(\"../shared/lib/utils\");\n\nconst _addlocale = require(\"./add-locale\");\n\nconst _routercontextsharedruntime = require(\"../shared/lib/router-context.shared-runtime\");\n\nconst _approutercontextsharedruntime = require(\"../shared/lib/app-router-context.shared-runtime\");\n\nconst _useintersection = require(\"./use-intersection\");\n\nconst _getdomainlocale = require(\"./get-domain-locale\");\n\nconst _addbasepath = require(\"./add-base-path\");\n\nconst _routerreducertypes = require(\"./components/router-reducer/router-reducer-types\");\n\nconst _usemergedref = require(\"./use-merged-ref\");\n\nconst prefetched = new Set();\n\nfunction prefetch(router, href, as, options, appOptions, isAppRouter) {\n  if (typeof window === 'undefined') {\n    return;\n  } // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n\n\n  if (!isAppRouter && !(0, _islocalurl.isLocalURL)(href)) {\n    return;\n  } // We should only dedupe requests when experimental.optimisticClientCache is\n  // disabled & when we're not using the app router. App router handles\n  // reusing an existing prefetch entry (if it exists) for the same URL.\n  // If we dedupe in here, we will cause a race where different prefetch kinds\n  // to the same URL (ie auto vs true) will cause one to be ignored.\n\n\n  if (!options.bypassPrefetchedCheck && !isAppRouter) {\n    const locale = // Let the link's locale prop override the default router locale.\n    typeof options.locale !== 'undefined' ? options.locale : 'locale' in router ? router.locale : undefined;\n    const prefetchedKey = href + '%' + as + '%' + locale; // If we've already fetched the key, then don't prefetch it again!\n\n    if (prefetched.has(prefetchedKey)) {\n      return;\n    } // Mark this URL as prefetched.\n\n\n    prefetched.add(prefetchedKey);\n  }\n\n  const doPrefetch = async () => {\n    if (isAppRouter) {\n      // note that `appRouter.prefetch()` is currently sync,\n      // so we have to wrap this call in an async function to be able to catch() errors below.\n      return router.prefetch(href, appOptions);\n    } else {\n      return router.prefetch(href, as, options);\n    }\n  }; // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n\n\n  doPrefetch().catch(err => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err;\n    }\n  });\n}\n\nfunction isModifiedEvent(event) {\n  const eventTarget = event.currentTarget;\n  const target = eventTarget.getAttribute('target');\n  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download\n  event.nativeEvent && event.nativeEvent.which === 2;\n}\n\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter) {\n  const {\n    nodeName\n  } = e.currentTarget; // anchors inside an svg have a lowercase nodeName\n\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A';\n\n  if (isAnchorNodeName && (isModifiedEvent(e) || // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n  !isAppRouter && !(0, _islocalurl.isLocalURL)(href))) {\n    // ignore click for browserâ€™s default behavior\n    return;\n  }\n\n  e.preventDefault();\n\n  const navigate = () => {\n    // If the router is an NextRouter instance it will have `beforePopState`\n    const routerScroll = scroll != null ? scroll : true;\n\n    if ('beforePopState' in router) {\n      router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll: routerScroll\n      });\n    } else {\n      router[replace ? 'replace' : 'push'](as || href, {\n        scroll: routerScroll\n      });\n    }\n  };\n\n  if (isAppRouter) {\n    _react.default.startTransition(navigate);\n  } else {\n    navigate();\n  }\n}\n\nfunction formatStringOrUrl(urlObjOrString) {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString;\n  }\n\n  return (0, _formaturl.formatUrl)(urlObjOrString);\n}\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\n\n\nconst Link = /*#__PURE__*/_react.default.forwardRef(function LinkComponent(props, forwardedRef) {\n  let children;\n  const {\n    href: hrefProp,\n    as: asProp,\n    children: childrenProp,\n    prefetch: prefetchProp = null,\n    passHref,\n    replace,\n    shallow,\n    scroll,\n    locale,\n    onClick,\n    onMouseEnter: onMouseEnterProp,\n    onTouchStart: onTouchStartProp,\n    legacyBehavior = false,\n    ...restProps\n  } = props;\n  children = childrenProp;\n\n  if (legacyBehavior && (typeof children === 'string' || typeof children === 'number')) {\n    children = /*#__PURE__*/(0, _jsxruntime.jsx)(\"a\", {\n      children: children\n    });\n  }\n\n  const pagesRouter = _react.default.useContext(_routercontextsharedruntime.RouterContext);\n\n  const appRouter = _react.default.useContext(_approutercontextsharedruntime.AppRouterContext);\n\n  const router = pagesRouter != null ? pagesRouter : appRouter; // We're in the app directory if there is no pages router.\n\n  const isAppRouter = !pagesRouter;\n  const prefetchEnabled = prefetchProp !== false;\n  /**\n   * The possible states for prefetch are:\n   * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n   * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n   * - false: we will not prefetch if in the viewport at all\n   */\n\n  const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;\n\n  if (process.env.NODE_ENV !== 'production') {\n    function createPropError(args) {\n      return new Error(\"Failed prop type: The prop `\" + args.key + \"` expects a \" + args.expected + \" in `<Link>`, but got `\" + args.actual + \"` instead.\" + (typeof window !== 'undefined' ? \"\\nOpen your browser's console to view the Component stack trace.\" : ''));\n    } // TypeScript trick for type-guarding:\n\n\n    const requiredPropsGuard = {\n      href: true\n    };\n    const requiredProps = Object.keys(requiredPropsGuard);\n    requiredProps.forEach(key => {\n      if (key === 'href') {\n        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key]\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // TypeScript trick for type-guarding:\n\n    const optionalPropsGuard = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true,\n      onClick: true,\n      onMouseEnter: true,\n      onTouchStart: true,\n      legacyBehavior: true\n    };\n    const optionalProps = Object.keys(optionalPropsGuard);\n    optionalProps.forEach(key => {\n      const valType = typeof props[key];\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType\n          });\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType\n          });\n        }\n      } else if (key === 'onClick' || key === 'onMouseEnter' || key === 'onTouchStart') {\n        if (props[key] && valType !== 'function') {\n          throw createPropError({\n            key,\n            expected: '`function`',\n            actual: valType\n          });\n        }\n      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch' || key === 'legacyBehavior') {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isAppRouter && !asProp) {\n      let href;\n\n      if (typeof hrefProp === 'string') {\n        href = hrefProp;\n      } else if (typeof hrefProp === 'object' && typeof hrefProp.pathname === 'string') {\n        href = hrefProp.pathname;\n      }\n\n      if (href) {\n        const hasDynamicSegment = href.split('/').some(segment => segment.startsWith('[') && segment.endsWith(']'));\n\n        if (hasDynamicSegment) {\n          throw new Error(\"Dynamic href `\" + href + \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\");\n        }\n      }\n    }\n  }\n\n  const {\n    href,\n    as\n  } = _react.default.useMemo(() => {\n    if (!pagesRouter) {\n      const resolvedHref = formatStringOrUrl(hrefProp);\n      return {\n        href: resolvedHref,\n        as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n      };\n    }\n\n    const [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(pagesRouter, hrefProp, true);\n    return {\n      href: resolvedHref,\n      as: asProp ? (0, _resolvehref.resolveHref)(pagesRouter, asProp) : resolvedAs || resolvedHref\n    };\n  }, [pagesRouter, hrefProp, asProp]);\n\n  const previousHref = _react.default.useRef(href);\n\n  const previousAs = _react.default.useRef(as); // This will return the first child, if multiple are provided it will throw an error\n\n\n  let child;\n\n  if (legacyBehavior) {\n    if (process.env.NODE_ENV === 'development') {\n      if (onClick) {\n        console.warn('\"onClick\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link');\n      }\n\n      if (onMouseEnterProp) {\n        console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');\n      }\n\n      try {\n        child = _react.default.Children.only(children);\n      } catch (err) {\n        if (!children) {\n          throw new Error(\"No children were passed to <Link> with `href` of `\" + hrefProp + \"` but one child is required https://nextjs.org/docs/messages/link-no-children\");\n        }\n\n        throw new Error(\"Multiple children were passed to <Link> with `href` of `\" + hrefProp + \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\" + (typeof window !== 'undefined' ? \" \\nOpen your browser's console to view the Component stack trace.\" : ''));\n      }\n    } else {\n      child = _react.default.Children.only(children);\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if ((children == null ? void 0 : children.type) === 'a') {\n        throw new Error('Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor');\n      }\n    }\n  }\n\n  const childRef = legacyBehavior ? child && typeof child === 'object' && child.ref : forwardedRef;\n  const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({\n    rootMargin: '200px'\n  });\n\n  const setIntersectionWithResetRef = _react.default.useCallback(el => {\n    // Before the link getting observed, check if visible state need to be reset\n    if (previousAs.current !== as || previousHref.current !== href) {\n      resetVisible();\n      previousAs.current = as;\n      previousHref.current = href;\n    }\n\n    setIntersectionRef(el);\n  }, [as, href, resetVisible, setIntersectionRef]);\n\n  const setRef = (0, _usemergedref.useMergedRef)(setIntersectionWithResetRef, childRef); // Prefetch the URL if we haven't already and it's visible.\n\n  _react.default.useEffect(() => {\n    // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n    if (process.env.NODE_ENV !== 'production') {\n      return;\n    }\n\n    if (!router) {\n      return;\n    } // If we don't need to prefetch the URL, don't do prefetch.\n\n\n    if (!isVisible || !prefetchEnabled) {\n      return;\n    } // Prefetch the URL.\n\n\n    prefetch(router, href, as, {\n      locale\n    }, {\n      kind: appPrefetchKind\n    }, isAppRouter);\n  }, [as, href, isVisible, locale, prefetchEnabled, pagesRouter == null ? void 0 : pagesRouter.locale, router, isAppRouter, appPrefetchKind]);\n\n  const childProps = {\n    ref: setRef,\n\n    onClick(e) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!e) {\n          throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n        }\n      }\n\n      if (!legacyBehavior && typeof onClick === 'function') {\n        onClick(e);\n      }\n\n      if (legacyBehavior && child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e);\n      }\n\n      if (!router) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter);\n    },\n\n    onMouseEnter(e) {\n      if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n        onMouseEnterProp(e);\n      }\n\n      if (legacyBehavior && child.props && typeof child.props.onMouseEnter === 'function') {\n        child.props.onMouseEnter(e);\n      }\n\n      if (!router) {\n        return;\n      }\n\n      if ((!prefetchEnabled || process.env.NODE_ENV === 'development') && isAppRouter) {\n        return;\n      }\n\n      prefetch(router, href, as, {\n        locale,\n        priority: true,\n        // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n        bypassPrefetchedCheck: true\n      }, {\n        kind: appPrefetchKind\n      }, isAppRouter);\n    },\n\n    onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START ? undefined : function onTouchStart(e) {\n      if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n        onTouchStartProp(e);\n      }\n\n      if (legacyBehavior && child.props && typeof child.props.onTouchStart === 'function') {\n        child.props.onTouchStart(e);\n      }\n\n      if (!router) {\n        return;\n      }\n\n      if (!prefetchEnabled && isAppRouter) {\n        return;\n      }\n\n      prefetch(router, href, as, {\n        locale,\n        priority: true,\n        // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n        bypassPrefetchedCheck: true\n      }, {\n        kind: appPrefetchKind\n      }, isAppRouter);\n    }\n  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user.\n  // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n\n  if ((0, _utils.isAbsoluteUrl)(as)) {\n    childProps.href = as;\n  } else if (!legacyBehavior || passHref || child.type === 'a' && !('href' in child.props)) {\n    const curLocale = typeof locale !== 'undefined' ? locale : pagesRouter == null ? void 0 : pagesRouter.locale; // we only render domain locales if we are currently on a domain locale\n    // so that locale links are still visitable in development/preview envs\n\n    const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n    childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n  }\n\n  return legacyBehavior ? /*#__PURE__*/_react.default.cloneElement(child, childProps) : /*#__PURE__*/(0, _jsxruntime.jsx)(\"a\", { ...restProps,\n    ...childProps,\n    children: children\n  });\n});\n\nconst _default = Link;\n\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"mappings":"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","names":["_interop_require_default","prefetched","Set","prefetch","router","window","href","appOptions","locale","options","prefetchedKey","doPrefetch","isAppRouter","process","NODE_ENV","isModifiedEvent","event","currentTarget","target","eventTarget","nativeEvent","which","linkClicked","e","replace","nodeName","isAnchorNodeName","isLocalURL","navigate","routerScroll","scroll","shallow","React","_react","startTransition","formatStringOrUrl","urlObjOrString","children","childrenProp","legacyBehavior","a","appRouter","useContext","AppRouterContext","pagesRouter","prefetchEnabled","_routerreducertypes","createPropError","args","requiredProps","forEach","Object","key","props","expected","actual","as","passHref","onClick","onMouseEnter","onTouchStart","optionalProps","valType","asProp","hrefProp","hasDynamicSegment","useMemo","resolvedHref","resolvedAs","previousAs","useRef","console","warn","child","err","Children","only","Error","childRef","setIntersectionRef","isVisible","resetVisible","useIntersection","rootMargin","setIntersectionWithResetRef","current","previousHref","appPrefetchKind","ref","setRef","env","onMouseEnterProp","priority","bypassPrefetchedCheck","undefined","onTouchStartProp","childProps","curLocale","localeDomain","addBasePath","addLocale","_getdomainlocale","defaultLocale","restProps"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\client\\link.tsx"],"sourcesContent":["'use client'\n\nimport type {\n  NextRouter,\n  PrefetchOptions as RouterPrefetchOptions,\n} from '../shared/lib/router/router'\n\nimport React from 'react'\nimport type { UrlObject } from 'url'\nimport { resolveHref } from './resolve-href'\nimport { isLocalURL } from '../shared/lib/router/utils/is-local-url'\nimport { formatUrl } from '../shared/lib/router/utils/format-url'\nimport { isAbsoluteUrl } from '../shared/lib/utils'\nimport { addLocale } from './add-locale'\nimport { RouterContext } from '../shared/lib/router-context.shared-runtime'\nimport { AppRouterContext } from '../shared/lib/app-router-context.shared-runtime'\nimport type {\n  AppRouterInstance,\n  PrefetchOptions as AppRouterPrefetchOptions,\n} from '../shared/lib/app-router-context.shared-runtime'\nimport { useIntersection } from './use-intersection'\nimport { getDomainLocale } from './get-domain-locale'\nimport { addBasePath } from './add-base-path'\nimport { PrefetchKind } from './components/router-reducer/router-reducer-types'\nimport { useMergedRef } from './use-merged-ref'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\ntype InternalLinkProps = {\n  /**\n   * The path or URL to navigate to. It can also be an object.\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#with-url-object\n   */\n  href: Url\n  /**\n   * Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes, check our [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes) to see how it worked. Note: when this path differs from the one provided in `href` the previous `href`/`as` behavior is used as shown in the [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes).\n   */\n  as?: Url\n  /**\n   * Replace the current `history` state instead of adding a new url into the stack.\n   *\n   * @defaultValue `false`\n   */\n  replace?: boolean\n  /**\n   * Whether to override the default scroll behavior\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#disable-scrolling-to-the-top-of-the-page\n   *\n   * @defaultValue `true`\n   */\n  scroll?: boolean\n  /**\n   * Update the path of the current page without rerunning [`getStaticProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props).\n   *\n   * @defaultValue `false`\n   */\n  shallow?: boolean\n  /**\n   * Forces `Link` to send the `href` property to its child.\n   *\n   * @defaultValue `false`\n   */\n  passHref?: boolean\n  /**\n   * Prefetch the page in the background.\n   * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n   * Prefetch can be disabled by passing `prefetch={false}`. Prefetching is only enabled in production.\n   *\n   * In App Router:\n   * - `null` (default): For statically generated pages, this will prefetch the full React Server Component data. For dynamic pages, this will prefetch up to the nearest route segment with a [`loading.js`](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file. If there is no loading file, it will not fetch the full tree to avoid fetching too much data.\n   * - `true`: This will prefetch the full React Server Component data for all route segments, regardless of whether they contain a segment with `loading.js`.\n   * - `false`: This will not prefetch any data, even on hover.\n   *\n   * In Pages Router:\n   * - `true` (default): The full route & its data will be prefetched.\n   * - `false`: Prefetching will not happen when entering the viewport, but will still happen on hover.\n   * @defaultValue `true` (pages router) or `null` (app router)\n   */\n  prefetch?: boolean | null\n  /**\n   * The active locale is automatically prepended. `locale` allows for providing a different locale.\n   * When `false` `href` has to include the locale as the default behavior is disabled.\n   */\n  locale?: string | false\n  /**\n   * Enable legacy link behavior.\n   * @defaultValue `false`\n   * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n   */\n  legacyBehavior?: boolean\n  /**\n   * Optional event handler for when the mouse pointer is moved onto Link\n   */\n  onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is touched.\n   */\n  onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n}\n\n// TODO-APP: Include the full set of Anchor props\n// adding this to the publicly exported type currently breaks existing apps\n\n// `RouteInferType` is a stub here to avoid breaking `typedRoutes` when the type\n// isn't generated yet. It will be replaced when the webpack plugin runs.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type LinkProps<RouteInferType = any> = InternalLinkProps\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<InternalLinkProps>\n\nconst prefetched = new Set<string>()\n\ntype PrefetchOptions = RouterPrefetchOptions & {\n  /**\n   * bypassPrefetchedCheck will bypass the check to see if the `href` has\n   * already been fetched.\n   */\n  bypassPrefetchedCheck?: boolean\n}\n\nfunction prefetch(\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  options: PrefetchOptions,\n  appOptions: AppRouterPrefetchOptions,\n  isAppRouter: boolean\n): void {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n  if (!isAppRouter && !isLocalURL(href)) {\n    return\n  }\n\n  // We should only dedupe requests when experimental.optimisticClientCache is\n  // disabled & when we're not using the app router. App router handles\n  // reusing an existing prefetch entry (if it exists) for the same URL.\n  // If we dedupe in here, we will cause a race where different prefetch kinds\n  // to the same URL (ie auto vs true) will cause one to be ignored.\n  if (!options.bypassPrefetchedCheck && !isAppRouter) {\n    const locale =\n      // Let the link's locale prop override the default router locale.\n      typeof options.locale !== 'undefined'\n        ? options.locale\n        : // Otherwise fallback to the router's locale.\n          'locale' in router\n          ? router.locale\n          : undefined\n\n    const prefetchedKey = href + '%' + as + '%' + locale\n\n    // If we've already fetched the key, then don't prefetch it again!\n    if (prefetched.has(prefetchedKey)) {\n      return\n    }\n\n    // Mark this URL as prefetched.\n    prefetched.add(prefetchedKey)\n  }\n\n  const doPrefetch = async () => {\n    if (isAppRouter) {\n      // note that `appRouter.prefetch()` is currently sync,\n      // so we have to wrap this call in an async function to be able to catch() errors below.\n      return (router as AppRouterInstance).prefetch(href, appOptions)\n    } else {\n      return (router as NextRouter).prefetch(href, as, options)\n    }\n  }\n\n  // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement\n  const target = eventTarget.getAttribute('target')\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  replace?: boolean,\n  shallow?: boolean,\n  scroll?: boolean,\n  locale?: string | false,\n  isAppRouter?: boolean\n): void {\n  const { nodeName } = e.currentTarget\n\n  // anchors inside an svg have a lowercase nodeName\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A'\n\n  if (\n    isAnchorNodeName &&\n    (isModifiedEvent(e) ||\n      // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n      (!isAppRouter && !isLocalURL(href)))\n  ) {\n    // ignore click for browserâ€™s default behavior\n    return\n  }\n\n  e.preventDefault()\n\n  const navigate = () => {\n    // If the router is an NextRouter instance it will have `beforePopState`\n    const routerScroll = scroll ?? true\n    if ('beforePopState' in router) {\n      router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll: routerScroll,\n      })\n    } else {\n      router[replace ? 'replace' : 'push'](as || href, {\n        scroll: routerScroll,\n      })\n    }\n  }\n\n  if (isAppRouter) {\n    React.startTransition(navigate)\n  } else {\n    navigate()\n  }\n}\n\ntype LinkPropsReal = React.PropsWithChildren<\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof LinkProps> &\n    LinkProps\n>\n\nfunction formatStringOrUrl(urlObjOrString: UrlObject | string): string {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString\n  }\n\n  return formatUrl(urlObjOrString)\n}\n\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkPropsReal>(\n  function LinkComponent(props, forwardedRef) {\n    let children: React.ReactNode\n\n    const {\n      href: hrefProp,\n      as: asProp,\n      children: childrenProp,\n      prefetch: prefetchProp = null,\n      passHref,\n      replace,\n      shallow,\n      scroll,\n      locale,\n      onClick,\n      onMouseEnter: onMouseEnterProp,\n      onTouchStart: onTouchStartProp,\n      legacyBehavior = false,\n      ...restProps\n    } = props\n\n    children = childrenProp\n\n    if (\n      legacyBehavior &&\n      (typeof children === 'string' || typeof children === 'number')\n    ) {\n      children = <a>{children}</a>\n    }\n\n    const pagesRouter = React.useContext(RouterContext)\n    const appRouter = React.useContext(AppRouterContext)\n    const router = pagesRouter ?? appRouter\n\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter\n\n    const prefetchEnabled = prefetchProp !== false\n    /**\n     * The possible states for prefetch are:\n     * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n     * - false: we will not prefetch if in the viewport at all\n     */\n    const appPrefetchKind =\n      prefetchProp === null ? PrefetchKind.AUTO : PrefetchKind.FULL\n\n    if (process.env.NODE_ENV !== 'production') {\n      function createPropError(args: {\n        key: string\n        expected: string\n        actual: string\n      }) {\n        return new Error(\n          `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n            (typeof window !== 'undefined'\n              ? \"\\nOpen your browser's console to view the Component stack trace.\"\n              : '')\n        )\n      }\n\n      // TypeScript trick for type-guarding:\n      const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n        href: true,\n      } as const\n      const requiredProps: LinkPropsRequired[] = Object.keys(\n        requiredPropsGuard\n      ) as LinkPropsRequired[]\n      requiredProps.forEach((key: LinkPropsRequired) => {\n        if (key === 'href') {\n          if (\n            props[key] == null ||\n            (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n          ) {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: props[key] === null ? 'null' : typeof props[key],\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const _: never = key\n        }\n      })\n\n      // TypeScript trick for type-guarding:\n      const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n        as: true,\n        replace: true,\n        scroll: true,\n        shallow: true,\n        passHref: true,\n        prefetch: true,\n        locale: true,\n        onClick: true,\n        onMouseEnter: true,\n        onTouchStart: true,\n        legacyBehavior: true,\n      } as const\n      const optionalProps: LinkPropsOptional[] = Object.keys(\n        optionalPropsGuard\n      ) as LinkPropsOptional[]\n      optionalProps.forEach((key: LinkPropsOptional) => {\n        const valType = typeof props[key]\n\n        if (key === 'as') {\n          if (props[key] && valType !== 'string' && valType !== 'object') {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: valType,\n            })\n          }\n        } else if (key === 'locale') {\n          if (props[key] && valType !== 'string') {\n            throw createPropError({\n              key,\n              expected: '`string`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'onClick' ||\n          key === 'onMouseEnter' ||\n          key === 'onTouchStart'\n        ) {\n          if (props[key] && valType !== 'function') {\n            throw createPropError({\n              key,\n              expected: '`function`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'replace' ||\n          key === 'scroll' ||\n          key === 'shallow' ||\n          key === 'passHref' ||\n          key === 'prefetch' ||\n          key === 'legacyBehavior'\n        ) {\n          if (props[key] != null && valType !== 'boolean') {\n            throw createPropError({\n              key,\n              expected: '`boolean`',\n              actual: valType,\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const _: never = key\n        }\n      })\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isAppRouter && !asProp) {\n        let href: string | undefined\n        if (typeof hrefProp === 'string') {\n          href = hrefProp\n        } else if (\n          typeof hrefProp === 'object' &&\n          typeof hrefProp.pathname === 'string'\n        ) {\n          href = hrefProp.pathname\n        }\n\n        if (href) {\n          const hasDynamicSegment = href\n            .split('/')\n            .some((segment) => segment.startsWith('[') && segment.endsWith(']'))\n\n          if (hasDynamicSegment) {\n            throw new Error(\n              `Dynamic href \\`${href}\\` found in <Link> while using the \\`/app\\` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href`\n            )\n          }\n        }\n      }\n    }\n\n    const { href, as } = React.useMemo(() => {\n      if (!pagesRouter) {\n        const resolvedHref = formatStringOrUrl(hrefProp)\n        return {\n          href: resolvedHref,\n          as: asProp ? formatStringOrUrl(asProp) : resolvedHref,\n        }\n      }\n\n      const [resolvedHref, resolvedAs] = resolveHref(\n        pagesRouter,\n        hrefProp,\n        true\n      )\n\n      return {\n        href: resolvedHref,\n        as: asProp\n          ? resolveHref(pagesRouter, asProp)\n          : resolvedAs || resolvedHref,\n      }\n    }, [pagesRouter, hrefProp, asProp])\n\n    const previousHref = React.useRef<string>(href)\n    const previousAs = React.useRef<string>(as)\n\n    // This will return the first child, if multiple are provided it will throw an error\n    let child: any\n    if (legacyBehavior) {\n      if (process.env.NODE_ENV === 'development') {\n        if (onClick) {\n          console.warn(\n            `\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`\n          )\n        }\n        if (onMouseEnterProp) {\n          console.warn(\n            `\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`\n          )\n        }\n        try {\n          child = React.Children.only(children)\n        } catch (err) {\n          if (!children) {\n            throw new Error(\n              `No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`\n            )\n          }\n          throw new Error(\n            `Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` +\n              (typeof window !== 'undefined'\n                ? \" \\nOpen your browser's console to view the Component stack trace.\"\n                : '')\n          )\n        }\n      } else {\n        child = React.Children.only(children)\n      }\n    } else {\n      if (process.env.NODE_ENV === 'development') {\n        if ((children as any)?.type === 'a') {\n          throw new Error(\n            'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'\n          )\n        }\n      }\n    }\n\n    const childRef: any = legacyBehavior\n      ? child && typeof child === 'object' && child.ref\n      : forwardedRef\n\n    const [setIntersectionRef, isVisible, resetVisible] = useIntersection({\n      rootMargin: '200px',\n    })\n\n    const setIntersectionWithResetRef = React.useCallback(\n      (el: Element) => {\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n          resetVisible()\n          previousAs.current = as\n          previousHref.current = href\n        }\n\n        setIntersectionRef(el)\n      },\n      [as, href, resetVisible, setIntersectionRef]\n    )\n\n    const setRef = useMergedRef(setIntersectionWithResetRef, childRef)\n\n    // Prefetch the URL if we haven't already and it's visible.\n    React.useEffect(() => {\n      // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n      if (process.env.NODE_ENV !== 'production') {\n        return\n      }\n\n      if (!router) {\n        return\n      }\n\n      // If we don't need to prefetch the URL, don't do prefetch.\n      if (!isVisible || !prefetchEnabled) {\n        return\n      }\n\n      // Prefetch the URL.\n      prefetch(\n        router,\n        href,\n        as,\n        { locale },\n        {\n          kind: appPrefetchKind,\n        },\n        isAppRouter\n      )\n    }, [\n      as,\n      href,\n      isVisible,\n      locale,\n      prefetchEnabled,\n      pagesRouter?.locale,\n      router,\n      isAppRouter,\n      appPrefetchKind,\n    ])\n\n    const childProps: {\n      onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n      onMouseEnter: React.MouseEventHandler<HTMLAnchorElement>\n      onClick: React.MouseEventHandler<HTMLAnchorElement>\n      href?: string\n      ref?: any\n    } = {\n      ref: setRef,\n      onClick(e) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!e) {\n            throw new Error(\n              `Component rendered inside next/link has to pass click event to \"onClick\" prop.`\n            )\n          }\n        }\n\n        if (!legacyBehavior && typeof onClick === 'function') {\n          onClick(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onClick === 'function'\n        ) {\n          child.props.onClick(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (e.defaultPrevented) {\n          return\n        }\n\n        linkClicked(\n          e,\n          router,\n          href,\n          as,\n          replace,\n          shallow,\n          scroll,\n          locale,\n          isAppRouter\n        )\n      },\n      onMouseEnter(e) {\n        if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n          onMouseEnterProp(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onMouseEnter === 'function'\n        ) {\n          child.props.onMouseEnter(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (\n          (!prefetchEnabled || process.env.NODE_ENV === 'development') &&\n          isAppRouter\n        ) {\n          return\n        }\n\n        prefetch(\n          router,\n          href,\n          as,\n          {\n            locale,\n            priority: true,\n            // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n            bypassPrefetchedCheck: true,\n          },\n          {\n            kind: appPrefetchKind,\n          },\n          isAppRouter\n        )\n      },\n      onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START\n        ? undefined\n        : function onTouchStart(e) {\n            if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n              onTouchStartProp(e)\n            }\n\n            if (\n              legacyBehavior &&\n              child.props &&\n              typeof child.props.onTouchStart === 'function'\n            ) {\n              child.props.onTouchStart(e)\n            }\n\n            if (!router) {\n              return\n            }\n\n            if (!prefetchEnabled && isAppRouter) {\n              return\n            }\n\n            prefetch(\n              router,\n              href,\n              as,\n              {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true,\n              },\n              {\n                kind: appPrefetchKind,\n              },\n              isAppRouter\n            )\n          },\n    }\n\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if (isAbsoluteUrl(as)) {\n      childProps.href = as\n    } else if (\n      !legacyBehavior ||\n      passHref ||\n      (child.type === 'a' && !('href' in child.props))\n    ) {\n      const curLocale =\n        typeof locale !== 'undefined' ? locale : pagesRouter?.locale\n\n      // we only render domain locales if we are currently on a domain locale\n      // so that locale links are still visitable in development/preview envs\n      const localeDomain =\n        pagesRouter?.isLocaleDomain &&\n        getDomainLocale(\n          as,\n          curLocale,\n          pagesRouter?.locales,\n          pagesRouter?.domainLocales\n        )\n\n      childProps.href =\n        localeDomain ||\n        addBasePath(addLocale(as, curLocale, pagesRouter?.defaultLocale))\n    }\n\n    return legacyBehavior ? (\n      React.cloneElement(child, childProps)\n    ) : (\n      <a {...restProps} {...childProps}>\n        {children}\n      </a>\n    )\n  }\n)\n\nexport default Link\n"]},"metadata":{},"sourceType":"script"}