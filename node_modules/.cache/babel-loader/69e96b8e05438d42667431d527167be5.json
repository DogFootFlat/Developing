{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  default: null,\n  getImageProps: null\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  default: function () {\n    return _default;\n  },\n  getImageProps: function () {\n    return getImageProps;\n  }\n});\n\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\n\nconst _getimgprops = require(\"./get-img-props\");\n\nconst _imagecomponent = require(\"../../client/image-component\");\n\nconst _imageloader = /*#__PURE__*/_interop_require_default._(require(\"next/dist/shared/lib/image-loader\"));\n\nfunction getImageProps(imgProps) {\n  const {\n    props\n  } = (0, _getimgprops.getImgProps)(imgProps, {\n    defaultLoader: _imageloader.default,\n    // This is replaced by webpack define plugin\n    imgConf: process.env.__NEXT_IMAGE_OPTS\n  }); // Normally we don't care about undefined props because we pass to JSX,\n  // but this exported function could be used by the end user for anything\n  // so we delete undefined props to clean it up a little.\n\n  for (const [key, value] of Object.entries(props)) {\n    if (value === undefined) {\n      delete props[key];\n    }\n  }\n\n  return {\n    props\n  };\n}\n\nconst _default = _imagecomponent.Image;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;EAiCAA,OAAoB;WAApBC;;EAjBgBC,aAAa;WAAbA;;;;;;6BAbY;;gCACN;;qEAGI;;AASnB,SAASA,aAAT,CAAuBC,QAAvB,EAA2C;EAChD,MAAM;IAAEC;EAAF,IAAYC,8BAAYF,QAAZE,EAAsB;IACtCC,mCADsC;IAEtC;IACAC,SAASC,QAAQC,GAARD,CAAYE;EAHiB,CAAtBL,CAAlB,CADgD,CAMhD;EACA;EACA;;EACA,KAAK,MAAM,CAACM,GAAD,EAAMC,KAAN,CAAX,IAA2BC,OAAOC,OAAPD,CAAeT,KAAfS,CAA3B,EAAkD;IAChD,IAAID,UAAUG,SAAd,EAAyB;MACvB,OAAOX,KAAK,CAACO,GAAD,CAAZ;IACF;EACF;;EACA,OAAO;IAAEP;EAAF,CAAP;AACF;;MAEAH,WAAee","names":["default","_default","getImageProps","imgProps","props","getImgProps","defaultLoader","imgConf","process","env","__NEXT_IMAGE_OPTS","key","value","Object","entries","undefined","Image"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\image-external.tsx"],"sourcesContent":["import type { ImageConfigComplete, ImageLoaderProps } from './image-config'\nimport type { ImageProps, ImageLoader, StaticImageData } from './get-img-props'\n\nimport { getImgProps } from './get-img-props'\nimport { Image } from '../../client/image-component'\n\n// @ts-ignore - This is replaced by webpack alias\nimport defaultLoader from 'next/dist/shared/lib/image-loader'\n\n/**\n * For more advanced use cases, you can call `getImageProps()`\n * to get the props that would be passed to the underlying `<img>` element,\n * and instead pass to them to another component, style, canvas, etc.\n *\n * Read more: [Next.js docs: `getImageProps`](https://nextjs.org/docs/app/api-reference/components/image#getimageprops)\n */\nexport function getImageProps(imgProps: ImageProps) {\n  const { props } = getImgProps(imgProps, {\n    defaultLoader,\n    // This is replaced by webpack define plugin\n    imgConf: process.env.__NEXT_IMAGE_OPTS as any as ImageConfigComplete,\n  })\n  // Normally we don't care about undefined props because we pass to JSX,\n  // but this exported function could be used by the end user for anything\n  // so we delete undefined props to clean it up a little.\n  for (const [key, value] of Object.entries(props)) {\n    if (value === undefined) {\n      delete props[key as keyof typeof props]\n    }\n  }\n  return { props }\n}\n\nexport default Image\n\nexport type { ImageProps, ImageLoaderProps, ImageLoader, StaticImageData }\n"]},"metadata":{},"sourceType":"script"}