{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  assign: null,\n  searchParamsToUrlQuery: null,\n  urlQueryToSearchParams: null\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  assign: function () {\n    return assign;\n  },\n  searchParamsToUrlQuery: function () {\n    return searchParamsToUrlQuery;\n  },\n  urlQueryToSearchParams: function () {\n    return urlQueryToSearchParams;\n  }\n});\n\nfunction searchParamsToUrlQuery(searchParams) {\n  const query = {};\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value;\n    } else if (Array.isArray(query[key])) {\n      query[key].push(value);\n    } else {\n      query[key] = [query[key], value];\n    }\n  });\n  return query;\n}\n\nfunction stringifyUrlQueryParam(param) {\n  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {\n    return String(param);\n  } else {\n    return '';\n  }\n}\n\nfunction urlQueryToSearchParams(urlQuery) {\n  const result = new URLSearchParams();\n  Object.entries(urlQuery).forEach(param => {\n    let [key, value] = param;\n\n    if (Array.isArray(value)) {\n      value.forEach(item => result.append(key, stringifyUrlQueryParam(item)));\n    } else {\n      result.set(key, stringifyUrlQueryParam(value));\n    }\n  });\n  return result;\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    searchParamsList[_key - 1] = arguments[_key];\n  }\n\n  searchParamsList.forEach(searchParams => {\n    Array.from(searchParams.keys()).forEach(key => target.delete(key));\n    searchParams.forEach((value, key) => target.append(key, value));\n  });\n  return target;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;EA4CgBA,MAAM;WAANA;;EA1CAC,sBAAsB;WAAtBA;;EA4BAC,sBAAsB;WAAtBA;;;;AA5BT,SAASD,sBAAT,CACLE,YADK,EACwB;EAE7B,MAAMC,QAAwB,EAA9B;EACAD,aAAaE,OAAbF,CAAqB,CAACG,KAAD,EAAQC,GAAR,KAAQA;IAC3B,IAAI,OAAOH,KAAK,CAACG,GAAD,CAAZ,KAAsB,WAA1B,EAAuC;MACrCH,KAAK,CAACG,GAAD,CAALH,GAAaE,KAAbF;IACF,CAFA,MAEO,IAAII,MAAMC,OAAND,CAAcJ,KAAK,CAACG,GAAD,CAAnBC,CAAJ,EAA+B;MAClCJ,KAAK,CAACG,GAAD,CAALH,CAAwBM,IAAxBN,CAA6BE,KAA7BF;IACJ,CAFO,MAEA;MACLA,KAAK,CAACG,GAAD,CAALH,GAAa,CAACA,KAAK,CAACG,GAAD,CAAN,EAAuBD,KAAvB,CAAbF;IACF;EACF,CARAD;EASA,OAAOC,KAAP;AACF;;AAEA,SAASO,sBAAT,CAAgCC,KAAhC,EAA8C;EAC5C,IACE,OAAOA,KAAP,KAAiB,QAAjB,IACC,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACC,MAAMD,KAANC,CAD/B,IAEA,OAAOD,KAAP,KAAiB,SAHnB,EAIE;IACA,OAAOE,OAAOF,KAAPE,CAAP;EACF,CANA,MAMO;IACL,OAAO,EAAP;EACF;AACF;;AAEO,SAASZ,sBAAT,CACLa,QADK,EACmB;EAExB,MAAMC,SAAS,IAAIC,eAAJ,EAAf;EACAC,OAAOC,OAAPD,CAAeH,QAAfG,EAAyBb,OAAzBa,CAAiCN;QAAC,CAACL,GAAD,EAAMD,KAAN,IAAYM;;IAC5C,IAAIJ,MAAMC,OAAND,CAAcF,KAAdE,CAAJ,EAA0B;MACxBF,MAAMD,OAANC,CAAec,IAAD,IAAUJ,OAAOK,MAAPL,CAAcT,GAAdS,EAAmBL,uBAAuBS,IAAvBT,CAAnBK,CAAxBV;IACF,CAFA,MAEO;MACLU,OAAOM,GAAPN,CAAWT,GAAXS,EAAgBL,uBAAuBL,KAAvBK,CAAhBK;IACF;EACF,CANAE;EAOA,OAAOF,MAAP;AACF;;AAEO,SAAShB,MAAT,CACLuB,MADK,EACkB;EACvB,kDAAGC,GAAH;IAAGA,iBAAHC,QAAGD,IAAHE,eAAGF;;;EAEHA,iBAAiBnB,OAAjBmB,CAA0BrB,YAAD,IAACA;IACxBK,MAAMmB,IAANnB,CAAWL,aAAayB,IAAbzB,EAAXK,EAAgCH,OAAhCG,CAAyCD,GAAD,IAASgB,OAAOM,MAAPN,CAAchB,GAAdgB,CAAjDf;IACAL,aAAaE,OAAbF,CAAqB,CAACG,KAAD,EAAQC,GAAR,KAAgBgB,OAAOF,MAAPE,CAAchB,GAAdgB,EAAmBjB,KAAnBiB,CAArCpB;EACF,CAHAqB;EAIA,OAAOD,MAAP;AACF","names":["assign","searchParamsToUrlQuery","urlQueryToSearchParams","searchParams","query","forEach","value","key","Array","isArray","push","stringifyUrlQueryParam","param","isNaN","String","urlQuery","result","URLSearchParams","Object","entries","item","append","set","target","searchParamsList","_key","arguments","from","keys","delete"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\router\\utils\\querystring.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(query[key])) {\n      ;(query[key] as string[]).push(value)\n    } else {\n      query[key] = [query[key] as string, value]\n    }\n  })\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: unknown): string {\n  if (\n    typeof param === 'string' ||\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(\n  urlQuery: ParsedUrlQuery\n): URLSearchParams {\n  const result = new URLSearchParams()\n  Object.entries(urlQuery).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach((item) => result.append(key, stringifyUrlQueryParam(item)))\n    } else {\n      result.set(key, stringifyUrlQueryParam(value))\n    }\n  })\n  return result\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  searchParamsList.forEach((searchParams) => {\n    Array.from(searchParams.keys()).forEach((key) => target.delete(key))\n    searchParams.forEach((value, key) => target.append(key, value))\n  })\n  return target\n}\n"]},"metadata":{},"sourceType":"script"}