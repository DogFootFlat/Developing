{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  default: null,\n  defaultHead: null\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  default: function () {\n    return _default;\n  },\n  defaultHead: function () {\n    return defaultHead;\n  }\n});\n\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\n\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\n\nconst _jsxruntime = require(\"react/jsx-runtime\");\n\nconst _react = /*#__PURE__*/_interop_require_wildcard._(require(\"react\"));\n\nconst _sideeffect = /*#__PURE__*/_interop_require_default._(require(\"./side-effect\"));\n\nconst _ampcontextsharedruntime = require(\"./amp-context.shared-runtime\");\n\nconst _headmanagercontextsharedruntime = require(\"./head-manager-context.shared-runtime\");\n\nconst _ampmode = require(\"./amp-mode\");\n\nconst _warnonce = require(\"./utils/warn-once\");\n\nfunction defaultHead(inAmpMode) {\n  if (inAmpMode === void 0) inAmpMode = false;\n  const head = [/*#__PURE__*/(0, _jsxruntime.jsx)(\"meta\", {\n    charSet: \"utf-8\"\n  }, \"charset\")];\n\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/(0, _jsxruntime.jsx)(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }, \"viewport\"));\n  }\n\n  return head;\n}\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === _react.default.Fragment) {\n    return list.concat( // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n    _react.default.Children.toArray(child.props.children).reduce( // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n    (fragmentList, fragmentChild) => {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  const keys = new Set();\n  const tags = new Set();\n  const metaTypes = new Set();\n  const metaCategories = {};\n  return h => {\n    let isUnique = true;\n    let hasKey = false;\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      const key = h.key.slice(h.key.indexOf('$') + 1);\n\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n\n\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n\n        break;\n\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            const category = h.props[metatype];\n            const categories = metaCategories[metatype] || new Set();\n\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n\n        break;\n    }\n\n    return isUnique;\n  };\n}\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */\n\n\nfunction reduceComponents(headChildrenElements, props) {\n  const {\n    inAmpMode\n  } = props;\n  return headChildrenElements.reduce(onlyReactElement, []).reverse().concat(defaultHead(inAmpMode).reverse()).filter(unique()).reverse().map((c, i) => {\n    const key = c.key || i;\n\n    if (process.env.NODE_ENV !== 'development' && process.env.__NEXT_OPTIMIZE_FONTS && !inAmpMode) {\n      if (c.type === 'link' && c.props['href'] && // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n      ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(url => c.props['href'].startsWith(url))) {\n        const newProps = { ...(c.props || {})\n        };\n        newProps['data-href'] = newProps['href'];\n        newProps['href'] = undefined; // Add this attribute to make it easy to identify optimized tags\n\n        newProps['data-optimized-fonts'] = true;\n        return /*#__PURE__*/_react.default.cloneElement(c, newProps);\n      }\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      // omit JSON-LD structured data snippets from the warning\n      if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n        const srcMessage = c.props['src'] ? '<script> tag with src=\"' + c.props['src'] + '\"' : \"inline <script>\";\n        (0, _warnonce.warnOnce)(\"Do not add <script> tags using next/head (see \" + srcMessage + \"). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\");\n      } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n        (0, _warnonce.warnOnce)('Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"' + c.props['href'] + '\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component');\n      }\n    }\n\n    return /*#__PURE__*/_react.default.cloneElement(c, {\n      key\n    });\n  });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\n\n\nfunction Head(param) {\n  let {\n    children\n  } = param;\n  const ampState = (0, _react.useContext)(_ampcontextsharedruntime.AmpStateContext);\n  const headManager = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n  return /*#__PURE__*/(0, _jsxruntime.jsx)(_sideeffect.default, {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _ampmode.isInAmpMode)(ampState),\n    children: children\n  });\n}\n\nconst _default = Head;\n\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"mappings":"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","names":["defaultHead","inAmpMode","charSet","head","name","content","onlyReactElement","list","child","concat","Fragment","React","Children","_react","fragmentList","fragmentChild","METATYPES","keys","Set","tags","metaTypes","metaCategories","h","isUnique","hasKey","key","has","type","metatype","i","hasOwnProperty","categories","props","headChildrenElements","process","env","NODE_ENV","c","__NEXT_OPTIMIZE_FONTS","some","url","newProps","startsWith","undefined","srcMessage","warnOnce","_warnonce","children","param","ampState","useContext","headManager","HeadManagerContext","Effect","reduceComponentsToState","reduceComponents","isInAmpMode"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\head.tsx"],"sourcesContent":["'use client'\n\nimport React, { useContext, type JSX } from 'react'\nimport Effect from './side-effect'\nimport { AmpStateContext } from './amp-context.shared-runtime'\nimport { HeadManagerContext } from './head-manager-context.shared-runtime'\nimport { isInAmpMode } from './amp-mode'\nimport { warnOnce } from './utils/warn-once'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" key=\"charset\" />]\n  if (!inAmpMode) {\n    head.push(\n      <meta name=\"viewport\" content=\"width=device-width\" key=\"viewport\" />\n    )\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactElement | number | string\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n      React.Children.toArray(child.props.children).reduce(\n        // @ts-expect-error @types/react does not remove fragments but this could also return ReactPortal[]\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactElement | number | string\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let isUnique = true\n    let hasKey = false\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        isUnique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return isUnique\n  }\n}\n\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */\nfunction reduceComponents<T extends {} & WithInAmpMode>(\n  headChildrenElements: Array<React.ReactElement<any>>,\n  props: T\n) {\n  const { inAmpMode } = props\n  return headChildrenElements\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(inAmpMode).reverse())\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      if (\n        process.env.NODE_ENV !== 'development' &&\n        process.env.__NEXT_OPTIMIZE_FONTS &&\n        !inAmpMode\n      ) {\n        if (\n          c.type === 'link' &&\n          c.props['href'] &&\n          // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n          ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(\n            (url) => c.props['href'].startsWith(url)\n          )\n        ) {\n          const newProps = { ...(c.props || {}) }\n          newProps['data-href'] = newProps['href']\n          newProps['href'] = undefined\n\n          // Add this attribute to make it easy to identify optimized tags\n          newProps['data-optimized-fonts'] = true\n\n          return React.cloneElement(c, newProps)\n        }\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // omit JSON-LD structured data snippets from the warning\n        if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n          const srcMessage = c.props['src']\n            ? `<script> tag with src=\"${c.props['src']}\"`\n            : `inline <script>`\n          warnOnce(\n            `Do not add <script> tags using next/head (see ${srcMessage}). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component`\n          )\n        } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n          warnOnce(\n            `Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"${c.props['href']}\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component`\n          )\n        }\n      }\n      return React.cloneElement(c, { key })\n    })\n}\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  const ampState = useContext(AmpStateContext)\n  const headManager = useContext(HeadManagerContext)\n  return (\n    <Effect\n      reduceComponentsToState={reduceComponents}\n      headManager={headManager}\n      inAmpMode={isInAmpMode(ampState)}\n    >\n      {children}\n    </Effect>\n  )\n}\n\nexport default Head\n"]},"metadata":{},"sourceType":"script"}