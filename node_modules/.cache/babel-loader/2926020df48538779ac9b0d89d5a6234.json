{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"useMergedRef\", {\n  enumerable: true,\n  get: function () {\n    return useMergedRef;\n  }\n});\n\nconst _react = require(\"react\");\n\nfunction useMergedRef(refA, refB) {\n  const cleanupA = (0, _react.useRef)(() => {});\n  const cleanupB = (0, _react.useRef)(() => {});\n  return (0, _react.useMemo)(() => {\n    if (!refA || !refB) {\n      return refA || refB;\n    }\n\n    return current => {\n      if (current === null) {\n        cleanupA.current();\n        cleanupB.current();\n      } else {\n        cleanupA.current = applyRef(refA, current);\n        cleanupB.current = applyRef(refB, current);\n      }\n    };\n  }, [refA, refB]);\n}\n\nfunction applyRef(refA, current) {\n  if (typeof refA === 'function') {\n    const cleanup = refA(current);\n\n    if (typeof cleanup === 'function') {\n      return cleanup;\n    } else {\n      return () => refA(null);\n    }\n  } else {\n    refA.current = current;\n    return () => {\n      refA.current = null;\n    };\n  }\n}\n\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"mappings":";;;;;+BASgBA;kBAAAA;;WAAAA;;AAAAA;;uBAT0B;;AASnC,SAASA,YAAT,CACLC,IADK,EAELC,IAFK,EAEc;EAEnB,MAAMC,WAAWC,mBAAmB,OAAO,CAA1BA,CAAjB;EACA,MAAMC,WAAWD,mBAAmB,OAAO,CAA1BA,CAAjB;EAEA,OAAOE,oBAAQ;IACb,IAAI,CAACL,IAAD,IAAS,CAACC,IAAd,EAAoB;MAClB,OAAOD,QAAQC,IAAf;IACF;;IAEA,OAAQK,OAAD,IAACA;MACN,IAAIA,YAAY,IAAhB,EAAsB;QACpBJ,SAASI,OAATJ;QACAE,SAASE,OAATF;MACF,CAHA,MAGO;QACLF,SAASI,OAATJ,GAAmBK,SAASP,IAATO,EAAeD,OAAfC,CAAnBL;QACAE,SAASE,OAATF,GAAmBG,SAASN,IAATM,EAAeD,OAAfC,CAAnBH;MACF;IACF,CARA;EASF,CAdOC,EAcJ,CAACL,IAAD,EAAOC,IAAP,CAdII,CAAP;AAeF;;AAEA,SAASE,QAAT,CACEP,IADF,EAEEM,OAFF,EAEmB;EAEjB,IAAI,OAAON,IAAP,KAAgB,UAApB,EAAgC;IAC9B,MAAMQ,UAAUR,KAAKM,OAALN,CAAhB;;IACA,IAAI,OAAOQ,OAAP,KAAmB,UAAvB,EAAmC;MACjC,OAAOA,OAAP;IACF,CAFA,MAEO;MACL,OAAO,MAAMR,KAAK,IAALA,CAAb;IACF;EACF,CAPA,MAOO;IACLA,KAAKM,OAALN,GAAeM,OAAfN;IACA,OAAO;MACLA,KAAKM,OAALN,GAAe,IAAfA;IACF,CAFA;EAGF;AACF","names":["useMergedRef","refA","refB","cleanupA","useRef","cleanupB","useMemo","current","applyRef","cleanup"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\client\\use-merged-ref.ts"],"sourcesContent":["import { useMemo, useRef, type Ref } from 'react'\n\n// This is a compatibility hook to support React 18 and 19 refs.\n// In 19, a cleanup function from refs may be returned.\n// In 18, returning a cleanup function creates a warning.\n// Since we take userspace refs, we don't know ahead of time if a cleanup function will be returned.\n// This implements cleanup functions with the old behavior in 18.\n// We know refs are always called alternating with `null` and then `T`.\n// So a call with `null` means we need to call the previous cleanup functions.\nexport function useMergedRef<TElement>(\n  refA: Ref<TElement>,\n  refB: Ref<TElement>\n): Ref<TElement> {\n  const cleanupA = useRef<() => void>(() => {})\n  const cleanupB = useRef<() => void>(() => {})\n\n  return useMemo(() => {\n    if (!refA || !refB) {\n      return refA || refB\n    }\n\n    return (current: TElement | null): void => {\n      if (current === null) {\n        cleanupA.current()\n        cleanupB.current()\n      } else {\n        cleanupA.current = applyRef(refA, current)\n        cleanupB.current = applyRef(refB, current)\n      }\n    }\n  }, [refA, refB])\n}\n\nfunction applyRef<TElement>(\n  refA: NonNullable<Ref<TElement>>,\n  current: TElement\n) {\n  if (typeof refA === 'function') {\n    const cleanup = refA(current)\n    if (typeof cleanup === 'function') {\n      return cleanup\n    } else {\n      return () => refA(null)\n    }\n  } else {\n    refA.current = current\n    return () => {\n      refA.current = null\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}