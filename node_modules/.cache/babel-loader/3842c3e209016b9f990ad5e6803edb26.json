{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _default;\n  }\n});\n\nfunction defaultLoader(param) {\n  let {\n    config,\n    src,\n    width,\n    quality\n  } = param;\n\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = []; // these should always be provided but make sure they are\n\n    if (!src) missingValues.push('src');\n    if (!width) missingValues.push('width');\n\n    if (missingValues.length > 0) {\n      throw new Error(\"Next Image Optimization requires \" + missingValues.join(', ') + \" to be provided. Make sure you pass them as props to the `next/image` component. Received: \" + JSON.stringify({\n        src,\n        width,\n        quality\n      }));\n    }\n\n    if (src.startsWith('//')) {\n      throw new Error('Failed to parse src \"' + src + '\" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)');\n    }\n\n    if (src.startsWith('/') && config.localPatterns) {\n      if (process.env.NODE_ENV !== 'test' && // micromatch isn't compatible with edge runtime\n      process.env.NEXT_RUNTIME !== 'edge') {\n        // We use dynamic require because this should only error in development\n        const {\n          hasLocalMatch\n        } = require('./match-local-pattern');\n\n        if (!hasLocalMatch(config.localPatterns, src)) {\n          throw new Error(\"Invalid src prop (\" + src + \") on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\\n\" + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns\");\n        }\n      }\n    }\n\n    if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n      let parsedSrc;\n\n      try {\n        parsedSrc = new URL(src);\n      } catch (err) {\n        console.error(err);\n        throw new Error('Failed to parse src \"' + src + '\" on `next/image`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)');\n      }\n\n      if (process.env.NODE_ENV !== 'test' && // micromatch isn't compatible with edge runtime\n      process.env.NEXT_RUNTIME !== 'edge') {\n        // We use dynamic require because this should only error in development\n        const {\n          hasRemoteMatch\n        } = require('./match-remote-pattern');\n\n        if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {\n          throw new Error(\"Invalid src prop (\" + src + ') on `next/image`, hostname \"' + parsedSrc.hostname + '\" is not configured under images in your `next.config.js`\\n' + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host\");\n        }\n      }\n    }\n  }\n\n  return config.path + \"?url=\" + encodeURIComponent(src) + \"&w=\" + width + \"&q=\" + (quality || 75) + (process.env.NEXT_DEPLOYMENT_ID ? \"&dpl=\" + process.env.NEXT_DEPLOYMENT_ID : '');\n} // We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\n\n\ndefaultLoader.__next_img_default = true;\nconst _default = defaultLoader;","map":{"version":3,"mappings":";;;;;+BAyFA;kBAAA;;WAAAA;;AAAA;;AAvFA,SAASC,aAAT,CAAuBC,KAAvB,EAK6B;EALN;IACrBC,MADqB;IAErBC,GAFqB;IAGrBC,KAHqB;IAIrBC;EAJqB;;EAMrB,IAAIC,QAAQC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IACzC,MAAMG,gBAAgB,EAAtB,CADyC,CAGzC;;IACA,IAAI,CAACN,GAAL,EAAUM,cAAcC,IAAdD,CAAmB,KAAnBA;IACV,IAAI,CAACL,KAAL,EAAYK,cAAcC,IAAdD,CAAmB,OAAnBA;;IAEZ,IAAIA,cAAcE,MAAdF,GAAuB,CAA3B,EAA8B;MAC5B,MAAM,IAAIG,KAAJ,CACJ,sCAAoCH,cAAcI,IAAdJ,CAClC,IADkCA,CAApC,GAEE,6FAFF,GAEiGK,KAAKC,SAALD,CAC/F;QAAEX,GAAF;QAAOC,KAAP;QAAcC;MAAd,CAD+FS,CAH7F,CAAN;IAOF;;IAEA,IAAIX,IAAIa,UAAJb,CAAe,IAAfA,CAAJ,EAA0B;MACxB,MAAM,IAAIS,KAAJ,CACJ,0BAAwBT,GAAxB,GAA4B,wGADxB,CAAN;IAGF;;IAEA,IAAIA,IAAIa,UAAJb,CAAe,GAAfA,KAAuBD,OAAOe,aAAlC,EAAiD;MAC/C,IACEX,QAAQC,GAARD,CAAYE,QAAZF,KAAyB,MAAzBA,IACA;MACAA,QAAQC,GAARD,CAAYY,YAAZZ,KAA6B,MAH/B,EAIE;QACA;QACA,MAAM;UAAEa;QAAF,IAAoBC,QAAQ,uBAARA,CAA1B;;QACA,IAAI,CAACD,cAAcjB,OAAOe,aAArBE,EAAoChB,GAApCgB,CAAL,EAA+C;UAC7C,MAAM,IAAIP,KAAJ,CACJ,uBAAqBT,GAArB,GAAyB,+FAAzB,GACG,uFAFC,CAAN;QAIF;MACF;IACF;;IAEA,IAAI,CAACA,IAAIa,UAAJb,CAAe,GAAfA,CAAD,KAAyBD,OAAOmB,OAAPnB,IAAkBA,OAAOoB,cAAlD,CAAJ,EAAuE;MACrE,IAAIC,SAAJ;;MACA,IAAI;QACFA,YAAY,IAAIC,GAAJ,CAAQrB,GAAR,CAAZoB;MACF,CAFA,CAEE,OAAOE,GAAP,EAAY;QACZC,QAAQC,KAARD,CAAcD,GAAdC;QACA,MAAM,IAAId,KAAJ,CACJ,0BAAwBT,GAAxB,GAA4B,+HADxB,CAAN;MAGF;;MAEA,IACEG,QAAQC,GAARD,CAAYE,QAAZF,KAAyB,MAAzBA,IACA;MACAA,QAAQC,GAARD,CAAYY,YAAZZ,KAA6B,MAH/B,EAIE;QACA;QACA,MAAM;UAAEsB;QAAF,IAAqBR,QAAQ,wBAARA,CAA3B;;QACA,IAAI,CAACQ,eAAe1B,OAAOmB,OAAtBO,EAA+B1B,OAAOoB,cAAtCM,EAAsDL,SAAtDK,CAAL,EAAuE;UACrE,MAAM,IAAIhB,KAAJ,CACJ,uBAAqBT,GAArB,GAAyB,+BAAzB,GAA0DoB,UAAUM,QAApE,GAA6E,6DAA7E,GACG,8EAFC,CAAN;QAIF;MACF;IACF;EACF;;EAEA,OAAO3B,MAAGA,CAAO4B,IAAV,GAAe,OAAf,GAAsBC,mBAAmB5B,GAAnB4B,CAAtB,GAA8C,KAA9C,GAAmD3B,KAAnD,GAAyD,KAAzD,IACLC,WAAW,EADN,KAGLC,QAAQC,GAARD,CAAY0B,kBAAZ1B,GACI,UAAQA,QAAQC,GAARD,CAAY0B,kBADxB1B,GAEI,EALC,CAAP;AAOF,C,CAEA;AACA;;;AACAN,cAAciC,kBAAdjC,GAAmC,IAAnCA;MAEAD,WAAeC","names":["_default","defaultLoader","param","config","src","width","quality","process","env","NODE_ENV","missingValues","push","length","Error","join","JSON","stringify","startsWith","localPatterns","NEXT_RUNTIME","hasLocalMatch","require","domains","remotePatterns","parsedSrc","URL","err","console","error","hasRemoteMatch","hostname","path","encodeURIComponent","NEXT_DEPLOYMENT_ID","__next_img_default"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\image-loader.ts"],"sourcesContent":["import type { ImageLoaderPropsWithConfig } from './image-config'\n\nfunction defaultLoader({\n  config,\n  src,\n  width,\n  quality,\n}: ImageLoaderPropsWithConfig): string {\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = []\n\n    // these should always be provided but make sure they are\n    if (!src) missingValues.push('src')\n    if (!width) missingValues.push('width')\n\n    if (missingValues.length > 0) {\n      throw new Error(\n        `Next Image Optimization requires ${missingValues.join(\n          ', '\n        )} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { src, width, quality }\n        )}`\n      )\n    }\n\n    if (src.startsWith('//')) {\n      throw new Error(\n        `Failed to parse src \"${src}\" on \\`next/image\\`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)`\n      )\n    }\n\n    if (src.startsWith('/') && config.localPatterns) {\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        // micromatch isn't compatible with edge runtime\n        process.env.NEXT_RUNTIME !== 'edge'\n      ) {\n        // We use dynamic require because this should only error in development\n        const { hasLocalMatch } = require('./match-local-pattern')\n        if (!hasLocalMatch(config.localPatterns, src)) {\n          throw new Error(\n            `Invalid src prop (${src}) on \\`next/image\\` does not match \\`images.localPatterns\\` configured in your \\`next.config.js\\`\\n` +\n              `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns`\n          )\n        }\n      }\n    }\n\n    if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n      let parsedSrc: URL\n      try {\n        parsedSrc = new URL(src)\n      } catch (err) {\n        console.error(err)\n        throw new Error(\n          `Failed to parse src \"${src}\" on \\`next/image\\`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`\n        )\n      }\n\n      if (\n        process.env.NODE_ENV !== 'test' &&\n        // micromatch isn't compatible with edge runtime\n        process.env.NEXT_RUNTIME !== 'edge'\n      ) {\n        // We use dynamic require because this should only error in development\n        const { hasRemoteMatch } = require('./match-remote-pattern')\n        if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {\n          throw new Error(\n            `Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` +\n              `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host`\n          )\n        }\n      }\n    }\n  }\n\n  return `${config.path}?url=${encodeURIComponent(src)}&w=${width}&q=${\n    quality || 75\n  }${\n    process.env.NEXT_DEPLOYMENT_ID\n      ? `&dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n      : ''\n  }`\n}\n\n// We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\ndefaultLoader.__next_img_default = true\n\nexport default defaultLoader\n"]},"metadata":{},"sourceType":"script"}