{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme?.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme?.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n\n    const _ref = scopedTheme || themeProp,\n          {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = _ref,\n          restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. get the `vars` object that refers to the CSS custom properties\n\n\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars; // 3. Start composing the theme object\n\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    });\n\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    } // 4. Resolve the color scheme and merge it to the theme\n\n\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n    });\n\n    const resolvedDefaultColorScheme = (() => {\n      if (typeof defaultColorScheme === 'string') {\n        return defaultColorScheme;\n      }\n\n      if (defaultMode === 'dark') {\n        return defaultColorScheme.dark;\n      }\n\n      return defaultColorScheme.light;\n    })();\n\n    themeProp.defaultColorScheme = resolvedDefaultColorScheme;\n    themeProp.colorSchemeSelector = colorSchemeSelector;\n    themeProp.attribute = attribute;\n\n    if (!theme.getColorSchemeSelector) {\n      theme.getColorSchemeSelector = targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`;\n    } // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_formatMuiErrorMessage","_excluded","React","PropTypes","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","process","env","NODE_ENV","displayName","useColorScheme","value","useContext","Error","CssVarsProvider","props","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","scopedTheme","_ref","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","stateMode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","stateColorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","themeVars","generateThemeVars","vars","generateSpacing","spacing","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","getColorSchemeSelector","targetColorScheme","useEffect","setAttribute","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","generateStyleSheets","map","styles","index","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"sources":["C:/OtpishiAI/node_modules/@mui/joy/node_modules/@mui/system/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme?.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme?.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    });\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n    });\n    const resolvedDefaultColorScheme = (() => {\n      if (typeof defaultColorScheme === 'string') {\n        return defaultColorScheme;\n      }\n      if (defaultMode === 'dark') {\n        return defaultColorScheme.dark;\n      }\n      return defaultColorScheme.light;\n    })();\n    themeProp.defaultColorScheme = resolvedDefaultColorScheme;\n    themeProp.colorSchemeSelector = colorSchemeSelector;\n    themeProp.attribute = attribute;\n    if (!theme.getColorSchemeSelector) {\n      theme.getColorSchemeSelector = targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`;\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;AACA,MAAMC,SAAS,GAAG,CAAC,cAAD,EAAiB,YAAjB,EAA+B,cAA/B,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,QAAQ,IAAIC,WAArB,QAAwC,sBAAxC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,8BAAP,IAAyCC,iBAAzC,EAA4DC,gCAA5D,EAA8FC,wBAA9F,QAA8H,4BAA9H;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,GAAG,IAAIC,IAAhB,EAAsBC,IAAI,IAAIC,KAA9B,QAA2C,mBAA3C;AACA,OAAO,MAAMC,sBAAsB,GAAG,0JAA/B;AACP,eAAe,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;EACrD,MAAM;IACJC,OADI;;IAEJ;AACJ;AACA;AACA;AACA;AACA;IACIC,KAAK,EAAEC,YAAY,GAAG,EARlB;IASJC,SAAS,EAAEC,gBAAgB,GAAGf,iBAT1B;IAUJgB,cAAc,EAAEC,qBAAqB,GAAGf,wBAVpC;IAWJgB,qBAAqB,EAAEC,4BAA4B,GAAGlB,gCAXlD;IAYJmB,WAAW,EAAEC,gBAAgB,GAAG,OAZ5B;IAaJC,kBAAkB,EAAEC,uBAbhB;IAcJC,yBAAyB,EAAEC,8BAA8B,GAAG,KAdxD;IAeJC;EAfI,IAgBFhB,OAhBJ;;EAiBA,IAAI,CAACG,YAAY,CAACc,YAAd,IAA8B,OAAOJ,uBAAP,KAAmC,QAAnC,IAA+C,CAACV,YAAY,CAACc,YAAb,CAA0BJ,uBAA1B,CAA9E,IAAoI,OAAOA,uBAAP,KAAmC,QAAnC,IAA+C,CAACV,YAAY,CAACc,YAAb,CAA0BJ,uBAAuB,EAAEK,KAAnD,CAApL,IAAiP,OAAOL,uBAAP,KAAmC,QAAnC,IAA+C,CAACV,YAAY,CAACc,YAAb,CAA0BJ,uBAAuB,EAAEM,IAAnD,CAArS,EAA+V;IAC7VC,OAAO,CAACC,KAAR,CAAe,UAASR,uBAAwB,8CAAhD;EACD;;EACD,MAAMS,kBAAkB,GAAG,aAAavC,KAAK,CAACwC,aAAN,CAAoBC,SAApB,CAAxC;;EACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCL,kBAAkB,CAACM,WAAnB,GAAiC,oBAAjC;EACD;;EACD,MAAMC,cAAc,GAAG,MAAM;IAC3B,MAAMC,KAAK,GAAG/C,KAAK,CAACgD,UAAN,CAAiBT,kBAAjB,CAAd;;IACA,IAAI,CAACQ,KAAL,EAAY;MACV,MAAM,IAAIE,KAAJ,CAAUP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC,kEAAzC,GAA6G9C,sBAAsB,CAAC,EAAD,CAA7I,CAAN;IACD;;IACD,OAAOiD,KAAP;EACD,CAND;;EAOA,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;IAC9B,MAAM;MACJC,QADI;MAEJjC,KAAK,EAAEkC,SAAS,GAAGjC,YAFf;MAGJG,cAAc,GAAGC,qBAHb;MAIJC,qBAAqB,GAAGC,4BAJpB;MAKJL,SAAS,GAAGC,gBALR;MAMJK,WAAW,GAAGC,gBANV;MAOJC,kBAAkB,GAAGC,uBAPjB;MAQJC,yBAAyB,GAAGC,8BARxB;MASJsB,aAAa,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCd,SAAhC,GAA4Cc,MATxD;MAUJC,YAAY,GAAG,OAAOC,QAAP,KAAoB,WAApB,GAAkChB,SAAlC,GAA8CgB,QAVzD;MAWJC,eAAe,GAAG,OAAOD,QAAP,KAAoB,WAApB,GAAkChB,SAAlC,GAA8CgB,QAAQ,CAACE,eAXrE;MAYJC,mBAAmB,GAAG,OAZlB;MAaJC,oBAAoB,GAAG,KAbnB;MAcJC,2BAA2B,GAAG;IAd1B,IAeFX,KAfJ;IAgBA,MAAMY,UAAU,GAAG/D,KAAK,CAACgE,MAAN,CAAa,KAAb,CAAnB;IACA,MAAMC,UAAU,GAAG7D,WAAW,EAA9B;IACA,MAAM8D,GAAG,GAAGlE,KAAK,CAACgD,UAAN,CAAiBT,kBAAjB,CAAZ;IACA,MAAM4B,MAAM,GAAG,CAAC,CAACD,GAAF,IAAS,CAACL,oBAAzB;IACA,MAAMO,WAAW,GAAGf,SAAS,CAACnC,OAAD,CAA7B;;IACA,MAAMmD,IAAI,GAAGD,WAAW,IAAIf,SAA5B;IAAA,MACE;MACEnB,YAAY,GAAG,EADjB;MAEEoC,UAAU,GAAG,EAFf;MAGEC;IAHF,IAIIF,IALN;IAAA,MAMEG,aAAa,GAAG3E,6BAA6B,CAACwE,IAAD,EAAOtE,SAAP,CAN/C;;IAOA,MAAM0E,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYzC,YAAZ,CAAxB;IACA,MAAM0C,uBAAuB,GAAG,OAAO/C,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DA,kBAAkB,CAACM,KAAjH;IACA,MAAM0C,sBAAsB,GAAG,OAAOhD,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DA,kBAAkB,CAACO,IAAhH,CA/B8B,CAiC9B;;IACA,MAAM;MACJ0C,IAAI,EAAEC,SADF;MAEJC,OAFI;MAGJC,UAHI;MAIJC,gBAJI;MAKJC,eALI;MAMJC,WAAW,EAAEC,gBANT;MAOJC;IAPI,IAQF5E,qBAAqB,CAAC;MACxB6E,qBAAqB,EAAEd,eADC;MAExBG,uBAFwB;MAGxBC,sBAHwB;MAIxBtD,cAJwB;MAKxBE,qBALwB;MAMxBE,WANwB;MAOxB2B;IAPwB,CAAD,CARzB;IAiBA,IAAIwB,IAAI,GAAGC,SAAX;IACA,IAAIK,WAAW,GAAGC,gBAAlB;;IACA,IAAIlB,MAAJ,EAAY;MACVW,IAAI,GAAGZ,GAAG,CAACY,IAAX;MACAM,WAAW,GAAGlB,GAAG,CAACkB,WAAlB;IACD;;IACD,MAAMI,cAAc,GAAG,CAAC,MAAM;MAC5B,IAAIV,IAAJ,EAAU;QACR,OAAOA,IAAP;MACD,CAH2B,CAI5B;;;MACA,IAAInD,WAAW,KAAK,QAApB,EAA8B;QAC5B,OAAOC,gBAAP;MACD;;MACD,OAAOD,WAAP;IACD,CATsB,GAAvB;;IAUA,MAAM8D,qBAAqB,GAAG,CAAC,MAAM;MACnC,IAAI,CAACL,WAAL,EAAkB;QAChB;QACA,IAAII,cAAc,KAAK,MAAvB,EAA+B;UAC7B,OAAOX,sBAAP;QACD,CAJe,CAKhB;;;QACA,OAAOD,uBAAP;MACD;;MACD,OAAOQ,WAAP;IACD,CAV6B,GAA9B,CAnE8B,CA+E9B;;;IACA,MAAMM,SAAS,GAAGlB,aAAa,CAACmB,iBAAd,QAAuCnB,aAAa,CAACoB,IAAvE,CAhF8B,CAkF9B;;IACA,MAAMzE,KAAK,GAAGvB,QAAQ,CAAC,EAAD,EAAK4E,aAAL,EAAoB;MACxCF,UADwC;MAExCpC,YAFwC;MAGxCqC,YAHwC;MAIxCqB,IAAI,EAAEF;IAJkC,CAApB,CAAtB;;IAMA,IAAI,OAAOvE,KAAK,CAAC0E,eAAb,KAAiC,UAArC,EAAiD;MAC/C1E,KAAK,CAAC2E,OAAN,GAAgB3E,KAAK,CAAC0E,eAAN,EAAhB;IACD,CA3F6B,CA6F9B;;;IACAnB,MAAM,CAACqB,OAAP,CAAe7D,YAAf,EAA6B8D,OAA7B,CAAqC,SAAmB;MAAA,IAAlB,CAACC,GAAD,EAAMC,MAAN,CAAkB;;MACtD,IAAID,GAAG,KAAKR,qBAAZ,EAAmC;QACjC;QACAf,MAAM,CAACC,IAAP,CAAYuB,MAAZ,EAAoBF,OAApB,CAA4BG,SAAS,IAAI;UACvC,IAAID,MAAM,CAACC,SAAD,CAAN,IAAqB,OAAOD,MAAM,CAACC,SAAD,CAAb,KAA6B,QAAtD,EAAgE;YAC9D;YACAhF,KAAK,CAACgF,SAAD,CAAL,GAAmBvG,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACgF,SAAD,CAAV,EAAuBD,MAAM,CAACC,SAAD,CAA7B,CAA3B;UACD,CAHD,MAGO;YACLhF,KAAK,CAACgF,SAAD,CAAL,GAAmBD,MAAM,CAACC,SAAD,CAAzB;UACD;QACF,CAPD;;QAQA,IAAIhF,KAAK,CAACiF,OAAV,EAAmB;UACjBjF,KAAK,CAACiF,OAAN,CAAchB,WAAd,GAA4Ba,GAA5B;QACD;MACF;IACF,CAfD;;IAgBA,MAAMI,0BAA0B,GAAG,CAAC,MAAM;MACxC,IAAI,OAAOxE,kBAAP,KAA8B,QAAlC,EAA4C;QAC1C,OAAOA,kBAAP;MACD;;MACD,IAAIF,WAAW,KAAK,MAApB,EAA4B;QAC1B,OAAOE,kBAAkB,CAACO,IAA1B;MACD;;MACD,OAAOP,kBAAkB,CAACM,KAA1B;IACD,CARkC,GAAnC;;IASAkB,SAAS,CAACxB,kBAAV,GAA+BwE,0BAA/B;IACAhD,SAAS,CAACO,mBAAV,GAAgCA,mBAAhC;IACAP,SAAS,CAAChC,SAAV,GAAsBA,SAAtB;;IACA,IAAI,CAACF,KAAK,CAACmF,sBAAX,EAAmC;MACjCnF,KAAK,CAACmF,sBAAN,GAA+BC,iBAAiB,IAAK,IAAGlF,SAAU,KAAIkF,iBAAkB,MAAxF;IACD,CA5H6B,CA8H9B;IACA;;;IACAvG,KAAK,CAACwG,SAAN,CAAgB,MAAM;MACpB,IAAIpB,WAAW,IAAI1B,eAAnB,EAAoC;QAClC;QACAA,eAAe,CAAC+C,YAAhB,CAA6BpF,SAA7B,EAAwC+D,WAAxC;MACD;IACF,CALD,EAKG,CAACA,WAAD,EAAc/D,SAAd,EAAyBqC,eAAzB,CALH,EAhI8B,CAuI9B;IACA;;IACA1D,KAAK,CAACwG,SAAN,CAAgB,MAAM;MACpB,IAAIE,KAAJ;;MACA,IAAI3E,yBAAyB,IAAIgC,UAAU,CAAC4C,OAAxC,IAAmDnD,YAAvD,EAAqE;QACnE,MAAMoD,GAAG,GAAGpD,YAAY,CAACqD,aAAb,CAA2B,OAA3B,CAAZ;QACAD,GAAG,CAACE,WAAJ,CAAgBtD,YAAY,CAACuD,cAAb,CAA4BhG,sBAA5B,CAAhB;QACAyC,YAAY,CAACwD,IAAb,CAAkBF,WAAlB,CAA8BF,GAA9B,EAHmE,CAKnE;;QACA,CAAC,MAAMrD,MAAM,CAAC0D,gBAAP,CAAwBzD,YAAY,CAAC0D,IAArC,CAAP;;QACAR,KAAK,GAAGS,UAAU,CAAC,MAAM;UACvB3D,YAAY,CAACwD,IAAb,CAAkBI,WAAlB,CAA8BR,GAA9B;QACD,CAFiB,EAEf,CAFe,CAAlB;MAGD;;MACD,OAAO,MAAM;QACXS,YAAY,CAACX,KAAD,CAAZ;MACD,CAFD;IAGD,CAhBD,EAgBG,CAACtB,WAAD,EAAcrD,yBAAd,EAAyCyB,YAAzC,CAhBH;IAiBAxD,KAAK,CAACwG,SAAN,CAAgB,MAAM;MACpBzC,UAAU,CAAC4C,OAAX,GAAqB,IAArB;MACA,OAAO,MAAM;QACX5C,UAAU,CAAC4C,OAAX,GAAqB,KAArB;MACD,CAFD;IAGD,CALD,EAKG,EALH;IAMA,MAAMW,YAAY,GAAGtH,KAAK,CAACuH,OAAN,CAAc,OAAO;MACxC9C,eADwC;MAExCW,WAFwC;MAGxCD,eAHwC;MAIxCD,gBAJwC;MAKxCJ,IALwC;MAMxCQ,cANwC;MAOxCN,OAPwC;MAQxCC;IARwC,CAAP,CAAd,EASjB,CAACR,eAAD,EAAkBW,WAAlB,EAA+BD,eAA/B,EAAgDD,gBAAhD,EAAkEJ,IAAlE,EAAwEQ,cAAxE,EAAwFN,OAAxF,EAAiGC,UAAjG,CATiB,CAArB;IAUA,IAAIuC,wBAAwB,GAAG,IAA/B;;IACA,IAAI1D,2BAA2B,IAAIK,MAAM,IAAIF,UAAU,EAAEM,YAAZ,KAA6BA,YAA1E,EAAwF;MACtFiD,wBAAwB,GAAG,KAA3B;IACD;;IACD,MAAMC,OAAO,GAAG,aAAa3G,KAAK,CAACd,KAAK,CAAC0H,QAAP,EAAiB;MACjDtE,QAAQ,EAAE,CAACoE,wBAAwB,IAAI,aAAa5G,IAAI,CAACZ,KAAK,CAAC0H,QAAP,EAAiB;QACvEtE,QAAQ,EAAE,CAACjC,KAAK,CAACwG,mBAAN,QAAiC,EAAlC,EAAsCC,GAAtC,CAA0C,CAACC,MAAD,EAASC,KAAT,KAAmB,aAAalH,IAAI,CAACV,YAAD,EAAe;UACrG2H,MAAM,EAAEA;QAD6F,CAAf,EAErFC,KAFqF,CAA9E;MAD6D,CAAjB,CAA9C,EAIN,aAAalH,IAAI,CAACP,aAAD,EAAgB;QACnCa,OAAO,EAAEkD,WAAW,GAAGlD,OAAH,GAAauB,SADE;QAEnCtB,KAAK,EAAEc,YAAY,GAAGA,YAAY,CAACd,KAAD,CAAf,GAAyBA,KAFT;QAGnCiC,QAAQ,EAAEA;MAHyB,CAAhB,CAJX;IADuC,CAAjB,CAAlC;;IAWA,IAAIe,MAAJ,EAAY;MACV,OAAOsD,OAAP;IACD;;IACD,OAAO,aAAa7G,IAAI,CAAC2B,kBAAkB,CAACwF,QAApB,EAA8B;MACpDhF,KAAK,EAAEuE,YAD6C;MAEpDlE,QAAQ,EAAEqE;IAF0C,CAA9B,CAAxB;EAID;;EACD/E,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCM,eAAe,CAAC8E,SAAhB,GAA4B;IAClE;AACJ;AACA;IACI3G,SAAS,EAAEpB,SAAS,CAACgI,MAJ6C;;IAKlE;AACJ;AACA;IACI7E,QAAQ,EAAEnD,SAAS,CAACiI,IAR8C;;IASlE;AACJ;AACA;IACIxE,eAAe,EAAEzD,SAAS,CAACkI,GAZuC;;IAalE;AACJ;AACA;IACIvE,mBAAmB,EAAE3D,SAAS,CAACgI,MAhBmC;;IAiBlE;AACJ;AACA;IACIxG,qBAAqB,EAAExB,SAAS,CAACgI,MApBiC;;IAqBlE;AACJ;AACA;IACIpG,kBAAkB,EAAE5B,SAAS,CAACmI,SAAV,CAAoB,CAACnI,SAAS,CAACgI,MAAX,EAAmBhI,SAAS,CAACoI,MAA7B,CAApB,CAxB8C;;IAyBlE;AACJ;AACA;IACI1G,WAAW,EAAE1B,SAAS,CAACgI,MA5B2C;;IA6BlE;AACJ;AACA;IACIpE,oBAAoB,EAAE5D,SAAS,CAACqI,IAhCkC;;IAiClE;AACJ;AACA;AACA;AACA;IACIxE,2BAA2B,EAAE7D,SAAS,CAACqI,IAtC2B;;IAuClE;AACJ;AACA;IACIvG,yBAAyB,EAAE9B,SAAS,CAACqI,IA1C6B;;IA2ClE;AACJ;AACA;IACI9E,YAAY,EAAEvD,SAAS,CAACkI,GA9C0C;;IA+ClE;AACJ;AACA;IACI5G,cAAc,EAAEtB,SAAS,CAACgI,MAlDwC;;IAmDlE;AACJ;AACA;AACA;IACI3E,aAAa,EAAErD,SAAS,CAACkI,GAvDyC;;IAwDlE;AACJ;AACA;IACIhH,KAAK,EAAElB,SAAS,CAACoI;EA3DiD,CAApE,GA4DI,KAAK,CA5DT;EA6DA,MAAMzD,uBAAuB,GAAG,OAAO9C,uBAAP,KAAmC,QAAnC,GAA8CA,uBAA9C,GAAwEA,uBAAuB,CAACK,KAAhI;EACA,MAAM0C,sBAAsB,GAAG,OAAO/C,uBAAP,KAAmC,QAAnC,GAA8CA,uBAA9C,GAAwEA,uBAAuB,CAACM,IAA/H;;EACA,MAAMmG,wBAAwB,GAAGC,MAAM,IAAIlI,8BAA8B,CAACV,QAAQ,CAAC;IACjFyB,SAAS,EAAEC,gBADsE;IAEjFG,qBAAqB,EAAEC,4BAF0D;IAGjFC,WAAW,EAAEC,gBAHoE;IAIjFgD,uBAJiF;IAKjFC,sBALiF;IAMjFtD,cAAc,EAAEC;EANiE,CAAD,EAO/EgH,MAP+E,CAAT,CAAzE;;EAQA,OAAO;IACLtF,eADK;IAELJ,cAFK;IAGLyF;EAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module"}