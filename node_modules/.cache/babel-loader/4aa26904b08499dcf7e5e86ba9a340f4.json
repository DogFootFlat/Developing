{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getImgProps\", {\n  enumerable: true,\n  get: function () {\n    return getImgProps;\n  }\n});\n\nconst _warnonce = require(\"./utils/warn-once\");\n\nconst _imageblursvg = require(\"./image-blur-svg\");\n\nconst _imageconfig = require(\"./image-config\");\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined];\n\nfunction isStaticRequire(src) {\n  return src.default !== undefined;\n}\n\nfunction isStaticImageData(src) {\n  return src.src !== undefined;\n}\n\nfunction isStaticImport(src) {\n  return !!src && typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));\n}\n\nconst allImgs = new Map();\nlet perfObserver;\n\nfunction getInt(x) {\n  if (typeof x === 'undefined') {\n    return x;\n  }\n\n  if (typeof x === 'number') {\n    return Number.isFinite(x) ? x : NaN;\n  }\n\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10);\n  }\n\n  return NaN;\n}\n\nfunction getWidths(param, width, sizes) {\n  let {\n    deviceSizes,\n    allSizes\n  } = param;\n\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n    const percentSizes = [];\n\n    for (let match; match = viewportWidthRe.exec(sizes); match) {\n      percentSizes.push(parseInt(match[2]));\n    }\n\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01;\n      return {\n        widths: allSizes.filter(s => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w'\n      };\n    }\n\n    return {\n      widths: allSizes,\n      kind: 'w'\n    };\n  }\n\n  if (typeof width !== 'number') {\n    return {\n      widths: deviceSizes,\n      kind: 'w'\n    };\n  }\n\n  const widths = [...new Set( // > This means that most OLED screens that say they are 3x resolution,\n  // > are actually 3x in the green color, but only 1.5x in the red and\n  // > blue colors. Showing a 3x resolution image in the app vs a 2x\n  // > resolution image will be visually the same, though the 3x image\n  // > takes significantly more data. Even true 3x resolution screens are\n  // > wasteful as the human eye cannot see that level of detail without\n  // > something like a magnifying glass.\n  // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n  [width, width * 2\n  /*, width * 3*/\n  ].map(w => allSizes.find(p => p >= w) || allSizes[allSizes.length - 1]))];\n  return {\n    widths,\n    kind: 'x'\n  };\n}\n\nfunction generateImgAttrs(param) {\n  let {\n    config,\n    src,\n    unoptimized,\n    width,\n    quality,\n    sizes,\n    loader\n  } = param;\n\n  if (unoptimized) {\n    return {\n      src,\n      srcSet: undefined,\n      sizes: undefined\n    };\n  }\n\n  const {\n    widths,\n    kind\n  } = getWidths(config, width, sizes);\n  const last = widths.length - 1;\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths.map((w, i) => loader({\n      config,\n      src,\n      quality,\n      width: w\n    }) + \" \" + (kind === 'w' ? w : i + 1) + kind).join(', '),\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({\n      config,\n      src,\n      quality,\n      width: widths[last]\n    })\n  };\n}\n\nfunction getImgProps(param, _state) {\n  let {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    fill = false,\n    style,\n    overrideSrc,\n    onLoad,\n    onLoadingComplete,\n    placeholder = 'empty',\n    blurDataURL,\n    fetchPriority,\n    decoding = 'async',\n    layout,\n    objectFit,\n    objectPosition,\n    lazyBoundary,\n    lazyRoot,\n    ...rest\n  } = param;\n  const {\n    imgConf,\n    showAltText,\n    blurComplete,\n    defaultLoader\n  } = _state;\n  let config;\n  let c = imgConf || _imageconfig.imageConfigDefault;\n\n  if ('allSizes' in c) {\n    config = c;\n  } else {\n    const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b);\n    const deviceSizes = c.deviceSizes.sort((a, b) => a - b);\n    config = { ...c,\n      allSizes,\n      deviceSizes\n    };\n  }\n\n  if (typeof defaultLoader === 'undefined') {\n    throw new Error('images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config');\n  }\n\n  let loader = rest.loader || defaultLoader; // Remove property so it's not spread on <img> element\n\n  delete rest.loader;\n  delete rest.srcSet; // This special value indicates that the user\n  // didn't define a \"loader\" prop or \"loader\" config.\n\n  const isDefaultLoader = ('__next_img_default' in loader);\n\n  if (isDefaultLoader) {\n    if (config.loader === 'custom') {\n      throw new Error('Image with src \"' + src + '\" is missing \"loader\" prop.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader\");\n    }\n  } else {\n    // The user defined a \"loader\" prop or config.\n    // Since the config object is internal only, we\n    // must not pass it to the user-defined \"loader\".\n    const customImageLoader = loader;\n\n    loader = obj => {\n      const {\n        config: _,\n        ...opts\n      } = obj;\n      return customImageLoader(opts);\n    };\n  }\n\n  if (layout) {\n    if (layout === 'fill') {\n      fill = true;\n    }\n\n    const layoutToStyle = {\n      intrinsic: {\n        maxWidth: '100%',\n        height: 'auto'\n      },\n      responsive: {\n        width: '100%',\n        height: 'auto'\n      }\n    };\n    const layoutToSizes = {\n      responsive: '100vw',\n      fill: '100vw'\n    };\n    const layoutStyle = layoutToStyle[layout];\n\n    if (layoutStyle) {\n      style = { ...style,\n        ...layoutStyle\n      };\n    }\n\n    const layoutSizes = layoutToSizes[layout];\n\n    if (layoutSizes && !sizes) {\n      sizes = layoutSizes;\n    }\n  }\n\n  let staticSrc = '';\n  let widthInt = getInt(width);\n  let heightInt = getInt(height);\n  let blurWidth;\n  let blurHeight;\n\n  if (isStaticImport(src)) {\n    const staticImageData = isStaticRequire(src) ? src.default : src;\n\n    if (!staticImageData.src) {\n      throw new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received \" + JSON.stringify(staticImageData));\n    }\n\n    if (!staticImageData.height || !staticImageData.width) {\n      throw new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received \" + JSON.stringify(staticImageData));\n    }\n\n    blurWidth = staticImageData.blurWidth;\n    blurHeight = staticImageData.blurHeight;\n    blurDataURL = blurDataURL || staticImageData.blurDataURL;\n    staticSrc = staticImageData.src;\n\n    if (!fill) {\n      if (!widthInt && !heightInt) {\n        widthInt = staticImageData.width;\n        heightInt = staticImageData.height;\n      } else if (widthInt && !heightInt) {\n        const ratio = widthInt / staticImageData.width;\n        heightInt = Math.round(staticImageData.height * ratio);\n      } else if (!widthInt && heightInt) {\n        const ratio = heightInt / staticImageData.height;\n        widthInt = Math.round(staticImageData.width * ratio);\n      }\n    }\n  }\n\n  src = typeof src === 'string' ? src : staticSrc;\n  let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');\n\n  if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n    unoptimized = true;\n    isLazy = false;\n  }\n\n  if (config.unoptimized) {\n    unoptimized = true;\n  }\n\n  if (isDefaultLoader && src.endsWith('.svg') && !config.dangerouslyAllowSVG) {\n    // Special case to make svg serve as-is to avoid proxying\n    // through the built-in Image Optimization API.\n    unoptimized = true;\n  }\n\n  const qualityInt = getInt(quality);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n      throw new Error(\"Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\\n  Possible solutions:\\n    - Remove `{ output: 'export' }` and run \\\"next start\\\" to run server mode including the Image Optimization API.\\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\\n  Read more: https://nextjs.org/docs/messages/export-image-api\");\n    }\n\n    if (!src) {\n      // React doesn't show the stack trace and there's\n      // no `src` to help identify which image, so we\n      // instead console.error(ref) during mount.\n      unoptimized = true;\n    } else {\n      if (fill) {\n        if (width) {\n          throw new Error('Image with src \"' + src + '\" has both \"width\" and \"fill\" properties. Only one should be used.');\n        }\n\n        if (height) {\n          throw new Error('Image with src \"' + src + '\" has both \"height\" and \"fill\" properties. Only one should be used.');\n        }\n\n        if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {\n          throw new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.');\n        }\n\n        if ((style == null ? void 0 : style.width) && style.width !== '100%') {\n          throw new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.');\n        }\n\n        if ((style == null ? void 0 : style.height) && style.height !== '100%') {\n          throw new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.');\n        }\n      } else {\n        if (typeof widthInt === 'undefined') {\n          throw new Error('Image with src \"' + src + '\" is missing required \"width\" property.');\n        } else if (isNaN(widthInt)) {\n          throw new Error('Image with src \"' + src + '\" has invalid \"width\" property. Expected a numeric value in pixels but received \"' + width + '\".');\n        }\n\n        if (typeof heightInt === 'undefined') {\n          throw new Error('Image with src \"' + src + '\" is missing required \"height\" property.');\n        } else if (isNaN(heightInt)) {\n          throw new Error('Image with src \"' + src + '\" has invalid \"height\" property. Expected a numeric value in pixels but received \"' + height + '\".');\n        } // eslint-disable-next-line no-control-regex\n\n\n        if (/^[\\x00-\\x20]/.test(src)) {\n          throw new Error('Image with src \"' + src + '\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.');\n        } // eslint-disable-next-line no-control-regex\n\n\n        if (/[\\x00-\\x20]$/.test(src)) {\n          throw new Error('Image with src \"' + src + '\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.');\n        }\n      }\n    }\n\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error('Image with src \"' + src + '\" has invalid \"loading\" property. Provided \"' + loading + '\" should be one of ' + VALID_LOADING_VALUES.map(String).join(',') + \".\");\n    }\n\n    if (priority && loading === 'lazy') {\n      throw new Error('Image with src \"' + src + '\" has both \"priority\" and \"loading=\\'lazy\\'\" properties. Only one should be used.');\n    }\n\n    if (placeholder !== 'empty' && placeholder !== 'blur' && !placeholder.startsWith('data:image/')) {\n      throw new Error('Image with src \"' + src + '\" has invalid \"placeholder\" property \"' + placeholder + '\".');\n    }\n\n    if (placeholder !== 'empty') {\n      if (widthInt && heightInt && widthInt * heightInt < 1600) {\n        (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.');\n      }\n    }\n\n    if (placeholder === 'blur' && !blurDataURL) {\n      const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif'] // should match next-image-loader\n      ;\n      throw new Error('Image with src \"' + src + '\" has \"placeholder=\\'blur\\'\" property but is missing the \"blurDataURL\" property.\\n        Possible solutions:\\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\\n          - Change the \"src\" property to a static import with one of the supported file types: ' + VALID_BLUR_EXT.join(',') + ' (animated images not supported)\\n          - Remove the \"placeholder\" property, effectively no blur effect\\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url');\n    }\n\n    if ('ref' in rest) {\n      (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.');\n    }\n\n    if (!unoptimized && !isDefaultLoader) {\n      const urlStr = loader({\n        config,\n        src,\n        width: widthInt || 400,\n        quality: qualityInt || 75\n      });\n      let url;\n\n      try {\n        url = new URL(urlStr);\n      } catch (err) {}\n\n      if (urlStr === src || url && url.pathname === src && !url.search) {\n        (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width\");\n      }\n    }\n\n    if (onLoadingComplete) {\n      (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.');\n    }\n\n    for (const [legacyKey, legacyValue] of Object.entries({\n      layout,\n      objectFit,\n      objectPosition,\n      lazyBoundary,\n      lazyRoot\n    })) {\n      if (legacyValue) {\n        (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has legacy prop \"' + legacyKey + '\". Did you forget to run the codemod?' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13\");\n      }\n    }\n\n    if (typeof window !== 'undefined' && !perfObserver && window.PerformanceObserver) {\n      perfObserver = new PerformanceObserver(entryList => {\n        for (const entry of entryList.getEntries()) {\n          var _entry_element; // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n\n\n          const imgSrc = (entry == null ? void 0 : (_entry_element = entry.element) == null ? void 0 : _entry_element.src) || '';\n          const lcpImage = allImgs.get(imgSrc);\n\n          if (lcpImage && !lcpImage.priority && lcpImage.placeholder === 'empty' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {\n            // https://web.dev/lcp/#measure-lcp-in-javascript\n            (0, _warnonce.warnOnce)('Image with src \"' + lcpImage.src + '\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.' + \"\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority\");\n          }\n        }\n      });\n\n      try {\n        perfObserver.observe({\n          type: 'largest-contentful-paint',\n          buffered: true\n        });\n      } catch (err) {\n        // Log error but don't crash the app\n        console.error(err);\n      }\n    }\n  }\n\n  const imgStyle = Object.assign(fill ? {\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    objectFit,\n    objectPosition\n  } : {}, showAltText ? {} : {\n    color: 'transparent'\n  }, style);\n  const backgroundImage = !blurComplete && placeholder !== 'empty' ? placeholder === 'blur' ? 'url(\"data:image/svg+xml;charset=utf-8,' + (0, _imageblursvg.getImageBlurSvg)({\n    widthInt,\n    heightInt,\n    blurWidth,\n    blurHeight,\n    blurDataURL: blurDataURL || '',\n    objectFit: imgStyle.objectFit\n  }) + '\")' : 'url(\"' + placeholder + '\")' // assume `data:image/`\n  : null;\n  let placeholderStyle = backgroundImage ? {\n    backgroundSize: imgStyle.objectFit || 'cover',\n    backgroundPosition: imgStyle.objectPosition || '50% 50%',\n    backgroundRepeat: 'no-repeat',\n    backgroundImage\n  } : {};\n\n  if (process.env.NODE_ENV === 'development') {\n    if (placeholderStyle.backgroundImage && placeholder === 'blur' && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {\n      // During `next dev`, we don't want to generate blur placeholders with webpack\n      // because it can delay starting the dev server. Instead, `next-image-loader.js`\n      // will inline a special url to lazily generate the blur placeholder at request time.\n      placeholderStyle.backgroundImage = 'url(\"' + blurDataURL + '\")';\n    }\n  }\n\n  const imgAttributes = generateImgAttrs({\n    config,\n    src,\n    unoptimized,\n    width: widthInt,\n    quality: qualityInt,\n    sizes,\n    loader\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      let fullUrl;\n\n      try {\n        fullUrl = new URL(imgAttributes.src);\n      } catch (e) {\n        fullUrl = new URL(imgAttributes.src, window.location.href);\n      }\n\n      allImgs.set(fullUrl.href, {\n        src,\n        priority,\n        placeholder\n      });\n    }\n  }\n\n  const props = { ...rest,\n    loading: isLazy ? 'lazy' : loading,\n    fetchPriority,\n    width: widthInt,\n    height: heightInt,\n    decoding,\n    className,\n    style: { ...imgStyle,\n      ...placeholderStyle\n    },\n    sizes: imgAttributes.sizes,\n    srcSet: imgAttributes.srcSet,\n    src: overrideSrc || imgAttributes.src\n  };\n  const meta = {\n    unoptimized,\n    priority,\n    placeholder,\n    fill\n  };\n  return {\n    props,\n    meta\n  };\n}","map":{"version":3,"mappings":"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","names":["getImgProps","VALID_LOADING_VALUES","undefined","isStaticRequire","src","default","isStaticImageData","isStaticImport","allImgs","Map","perfObserver","getInt","x","Number","isFinite","NaN","test","parseInt","getWidths","param","width","sizes","deviceSizes","allSizes","viewportWidthRe","percentSizes","match","exec","push","length","smallestRatio","Math","min","widths","filter","s","kind","Set","map","w","find","p","generateImgAttrs","config","unoptimized","quality","loader","srcSet","last","i","join","_state","priority","loading","className","height","fill","style","overrideSrc","onLoad","onLoadingComplete","placeholder","blurDataURL","fetchPriority","decoding","layout","objectFit","objectPosition","lazyBoundary","lazyRoot","rest","imgConf","showAltText","blurComplete","defaultLoader","c","imageConfigDefault","imageSizes","sort","a","b","Error","isDefaultLoader","customImageLoader","obj","_","opts","layoutToStyle","intrinsic","maxWidth","responsive","layoutToSizes","layoutStyle","layoutSizes","staticSrc","widthInt","heightInt","blurWidth","blurHeight","staticImageData","JSON","stringify","ratio","round","isLazy","startsWith","endsWith","dangerouslyAllowSVG","qualityInt","process","env","NODE_ENV","output","position","isNaN","includes","String","warnOnce","VALID_BLUR_EXT","urlStr","url","URL","err","pathname","search","legacyKey","legacyValue","Object","entries","window","PerformanceObserver","entryList","entry","getEntries","imgSrc","element","lcpImage","get","observe","type","buffered","console","error","imgStyle","assign","left","top","right","bottom","color","backgroundImage","getImageBlurSvg","placeholderStyle","backgroundSize","backgroundPosition","backgroundRepeat","imgAttributes","fullUrl","e","location","href","set","props","meta"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\get-img-props.ts"],"sourcesContent":["import { warnOnce } from './utils/warn-once'\nimport { getImageBlurSvg } from './image-blur-svg'\nimport { imageConfigDefault } from './image-config'\nimport type {\n  ImageConfigComplete,\n  ImageLoaderProps,\n  ImageLoaderPropsWithConfig,\n} from './image-config'\n\nimport type { JSX } from 'react'\n\nexport interface StaticImageData {\n  src: string\n  height: number\n  width: number\n  blurDataURL?: string\n  blurWidth?: number\n  blurHeight?: number\n}\n\nexport interface StaticRequire {\n  default: StaticImageData\n}\n\nexport type StaticImport = StaticRequire | StaticImageData\n\nexport type ImageProps = Omit<\n  JSX.IntrinsicElements['img'],\n  'src' | 'srcSet' | 'ref' | 'alt' | 'width' | 'height' | 'loading'\n> & {\n  src: string | StaticImport\n  alt: string\n  width?: number | `${number}`\n  height?: number | `${number}`\n  fill?: boolean\n  loader?: ImageLoader\n  quality?: number | `${number}`\n  priority?: boolean\n  loading?: LoadingValue\n  placeholder?: PlaceholderValue\n  blurDataURL?: string\n  unoptimized?: boolean\n  overrideSrc?: string\n  /**\n   * @deprecated Use `onLoad` instead.\n   * @see https://nextjs.org/docs/app/api-reference/components/image#onload\n   */\n  onLoadingComplete?: OnLoadingComplete\n  /**\n   * @deprecated Use `fill` prop instead of `layout=\"fill\"` or change import to `next/legacy/image`.\n   * @see https://nextjs.org/docs/api-reference/next/legacy/image\n   */\n  layout?: string\n  /**\n   * @deprecated Use `style` prop instead.\n   */\n  objectFit?: string\n  /**\n   * @deprecated Use `style` prop instead.\n   */\n  objectPosition?: string\n  /**\n   * @deprecated This prop does not do anything.\n   */\n  lazyBoundary?: string\n  /**\n   * @deprecated This prop does not do anything.\n   */\n  lazyRoot?: string\n}\n\nexport type ImgProps = Omit<ImageProps, 'src' | 'loader'> & {\n  loading: LoadingValue\n  width: number | undefined\n  height: number | undefined\n  style: NonNullable<JSX.IntrinsicElements['img']['style']>\n  sizes: string | undefined\n  srcSet: string | undefined\n  src: string\n}\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined] as const\ntype LoadingValue = (typeof VALID_LOADING_VALUES)[number]\ntype ImageConfig = ImageConfigComplete & {\n  allSizes: number[]\n  output?: 'standalone' | 'export'\n}\n\nexport type ImageLoader = (p: ImageLoaderProps) => string\n\n// Do not export - this is an internal type only\n// because `next.config.js` is only meant for the\n// built-in loaders, not for a custom loader() prop.\ntype ImageLoaderWithConfig = (p: ImageLoaderPropsWithConfig) => string\n\nexport type PlaceholderValue = 'blur' | 'empty' | `data:image/${string}`\nexport type OnLoad = React.ReactEventHandler<HTMLImageElement> | undefined\nexport type OnLoadingComplete = (img: HTMLImageElement) => void\n\nfunction isStaticRequire(\n  src: StaticRequire | StaticImageData\n): src is StaticRequire {\n  return (src as StaticRequire).default !== undefined\n}\n\nfunction isStaticImageData(\n  src: StaticRequire | StaticImageData\n): src is StaticImageData {\n  return (src as StaticImageData).src !== undefined\n}\n\nfunction isStaticImport(src: string | StaticImport): src is StaticImport {\n  return (\n    !!src &&\n    typeof src === 'object' &&\n    (isStaticRequire(src as StaticImport) ||\n      isStaticImageData(src as StaticImport))\n  )\n}\n\nconst allImgs = new Map<\n  string,\n  { src: string; priority: boolean; placeholder: PlaceholderValue }\n>()\nlet perfObserver: PerformanceObserver | undefined\n\nfunction getInt(x: unknown): number | undefined {\n  if (typeof x === 'undefined') {\n    return x\n  }\n  if (typeof x === 'number') {\n    return Number.isFinite(x) ? x : NaN\n  }\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10)\n  }\n  return NaN\n}\n\nfunction getWidths(\n  { deviceSizes, allSizes }: ImageConfig,\n  width: number | undefined,\n  sizes: string | undefined\n): { widths: number[]; kind: 'w' | 'x' } {\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g\n    const percentSizes = []\n    for (let match; (match = viewportWidthRe.exec(sizes)); match) {\n      percentSizes.push(parseInt(match[2]))\n    }\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01\n      return {\n        widths: allSizes.filter((s) => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w',\n      }\n    }\n    return { widths: allSizes, kind: 'w' }\n  }\n  if (typeof width !== 'number') {\n    return { widths: deviceSizes, kind: 'w' }\n  }\n\n  const widths = [\n    ...new Set(\n      // > This means that most OLED screens that say they are 3x resolution,\n      // > are actually 3x in the green color, but only 1.5x in the red and\n      // > blue colors. Showing a 3x resolution image in the app vs a 2x\n      // > resolution image will be visually the same, though the 3x image\n      // > takes significantly more data. Even true 3x resolution screens are\n      // > wasteful as the human eye cannot see that level of detail without\n      // > something like a magnifying glass.\n      // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n      [width, width * 2 /*, width * 3*/].map(\n        (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]\n      )\n    ),\n  ]\n  return { widths, kind: 'x' }\n}\n\ntype GenImgAttrsData = {\n  config: ImageConfig\n  src: string\n  unoptimized: boolean\n  loader: ImageLoaderWithConfig\n  width?: number\n  quality?: number\n  sizes?: string\n}\n\ntype GenImgAttrsResult = {\n  src: string\n  srcSet: string | undefined\n  sizes: string | undefined\n}\n\nfunction generateImgAttrs({\n  config,\n  src,\n  unoptimized,\n  width,\n  quality,\n  sizes,\n  loader,\n}: GenImgAttrsData): GenImgAttrsResult {\n  if (unoptimized) {\n    return { src, srcSet: undefined, sizes: undefined }\n  }\n\n  const { widths, kind } = getWidths(config, width, sizes)\n  const last = widths.length - 1\n\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths\n      .map(\n        (w, i) =>\n          `${loader({ config, src, quality, width: w })} ${\n            kind === 'w' ? w : i + 1\n          }${kind}`\n      )\n      .join(', '),\n\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({ config, src, quality, width: widths[last] }),\n  }\n}\n\n/**\n * A shared function, used on both client and server, to generate the props for <img>.\n */\nexport function getImgProps(\n  {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    fill = false,\n    style,\n    overrideSrc,\n    onLoad,\n    onLoadingComplete,\n    placeholder = 'empty',\n    blurDataURL,\n    fetchPriority,\n    decoding = 'async',\n    layout,\n    objectFit,\n    objectPosition,\n    lazyBoundary,\n    lazyRoot,\n    ...rest\n  }: ImageProps,\n  _state: {\n    defaultLoader: ImageLoaderWithConfig\n    imgConf: ImageConfigComplete\n    showAltText?: boolean\n    blurComplete?: boolean\n  }\n): {\n  props: ImgProps\n  meta: {\n    unoptimized: boolean\n    priority: boolean\n    placeholder: NonNullable<ImageProps['placeholder']>\n    fill: boolean\n  }\n} {\n  const { imgConf, showAltText, blurComplete, defaultLoader } = _state\n  let config: ImageConfig\n  let c = imgConf || imageConfigDefault\n  if ('allSizes' in c) {\n    config = c as ImageConfig\n  } else {\n    const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b)\n    const deviceSizes = c.deviceSizes.sort((a, b) => a - b)\n    config = { ...c, allSizes, deviceSizes }\n  }\n\n  if (typeof defaultLoader === 'undefined') {\n    throw new Error(\n      'images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config'\n    )\n  }\n  let loader: ImageLoaderWithConfig = rest.loader || defaultLoader\n\n  // Remove property so it's not spread on <img> element\n  delete rest.loader\n  delete (rest as any).srcSet\n\n  // This special value indicates that the user\n  // didn't define a \"loader\" prop or \"loader\" config.\n  const isDefaultLoader = '__next_img_default' in loader\n\n  if (isDefaultLoader) {\n    if (config.loader === 'custom') {\n      throw new Error(\n        `Image with src \"${src}\" is missing \"loader\" prop.` +\n          `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader`\n      )\n    }\n  } else {\n    // The user defined a \"loader\" prop or config.\n    // Since the config object is internal only, we\n    // must not pass it to the user-defined \"loader\".\n    const customImageLoader = loader as ImageLoader\n    loader = (obj) => {\n      const { config: _, ...opts } = obj\n      return customImageLoader(opts)\n    }\n  }\n\n  if (layout) {\n    if (layout === 'fill') {\n      fill = true\n    }\n    const layoutToStyle: Record<string, Record<string, string> | undefined> = {\n      intrinsic: { maxWidth: '100%', height: 'auto' },\n      responsive: { width: '100%', height: 'auto' },\n    }\n    const layoutToSizes: Record<string, string | undefined> = {\n      responsive: '100vw',\n      fill: '100vw',\n    }\n    const layoutStyle = layoutToStyle[layout]\n    if (layoutStyle) {\n      style = { ...style, ...layoutStyle }\n    }\n    const layoutSizes = layoutToSizes[layout]\n    if (layoutSizes && !sizes) {\n      sizes = layoutSizes\n    }\n  }\n\n  let staticSrc = ''\n  let widthInt = getInt(width)\n  let heightInt = getInt(height)\n  let blurWidth: number | undefined\n  let blurHeight: number | undefined\n  if (isStaticImport(src)) {\n    const staticImageData = isStaticRequire(src) ? src.default : src\n\n    if (!staticImageData.src) {\n      throw new Error(\n        `An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ${JSON.stringify(\n          staticImageData\n        )}`\n      )\n    }\n    if (!staticImageData.height || !staticImageData.width) {\n      throw new Error(\n        `An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ${JSON.stringify(\n          staticImageData\n        )}`\n      )\n    }\n\n    blurWidth = staticImageData.blurWidth\n    blurHeight = staticImageData.blurHeight\n    blurDataURL = blurDataURL || staticImageData.blurDataURL\n    staticSrc = staticImageData.src\n\n    if (!fill) {\n      if (!widthInt && !heightInt) {\n        widthInt = staticImageData.width\n        heightInt = staticImageData.height\n      } else if (widthInt && !heightInt) {\n        const ratio = widthInt / staticImageData.width\n        heightInt = Math.round(staticImageData.height * ratio)\n      } else if (!widthInt && heightInt) {\n        const ratio = heightInt / staticImageData.height\n        widthInt = Math.round(staticImageData.width * ratio)\n      }\n    }\n  }\n  src = typeof src === 'string' ? src : staticSrc\n\n  let isLazy =\n    !priority && (loading === 'lazy' || typeof loading === 'undefined')\n  if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n    // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n    unoptimized = true\n    isLazy = false\n  }\n  if (config.unoptimized) {\n    unoptimized = true\n  }\n  if (isDefaultLoader && src.endsWith('.svg') && !config.dangerouslyAllowSVG) {\n    // Special case to make svg serve as-is to avoid proxying\n    // through the built-in Image Optimization API.\n    unoptimized = true\n  }\n\n  const qualityInt = getInt(quality)\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n      throw new Error(\n        `Image Optimization using the default loader is not compatible with \\`{ output: 'export' }\\`.\n  Possible solutions:\n    - Remove \\`{ output: 'export' }\\` and run \"next start\" to run server mode including the Image Optimization API.\n    - Configure \\`{ images: { unoptimized: true } }\\` in \\`next.config.js\\` to disable the Image Optimization API.\n  Read more: https://nextjs.org/docs/messages/export-image-api`\n      )\n    }\n    if (!src) {\n      // React doesn't show the stack trace and there's\n      // no `src` to help identify which image, so we\n      // instead console.error(ref) during mount.\n      unoptimized = true\n    } else {\n      if (fill) {\n        if (width) {\n          throw new Error(\n            `Image with src \"${src}\" has both \"width\" and \"fill\" properties. Only one should be used.`\n          )\n        }\n        if (height) {\n          throw new Error(\n            `Image with src \"${src}\" has both \"height\" and \"fill\" properties. Only one should be used.`\n          )\n        }\n        if (style?.position && style.position !== 'absolute') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.`\n          )\n        }\n        if (style?.width && style.width !== '100%') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.`\n          )\n        }\n        if (style?.height && style.height !== '100%') {\n          throw new Error(\n            `Image with src \"${src}\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.`\n          )\n        }\n      } else {\n        if (typeof widthInt === 'undefined') {\n          throw new Error(\n            `Image with src \"${src}\" is missing required \"width\" property.`\n          )\n        } else if (isNaN(widthInt)) {\n          throw new Error(\n            `Image with src \"${src}\" has invalid \"width\" property. Expected a numeric value in pixels but received \"${width}\".`\n          )\n        }\n        if (typeof heightInt === 'undefined') {\n          throw new Error(\n            `Image with src \"${src}\" is missing required \"height\" property.`\n          )\n        } else if (isNaN(heightInt)) {\n          throw new Error(\n            `Image with src \"${src}\" has invalid \"height\" property. Expected a numeric value in pixels but received \"${height}\".`\n          )\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/^[\\x00-\\x20]/.test(src)) {\n          throw new Error(\n            `Image with src \"${src}\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.`\n          )\n        }\n        // eslint-disable-next-line no-control-regex\n        if (/[\\x00-\\x20]$/.test(src)) {\n          throw new Error(\n            `Image with src \"${src}\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.`\n          )\n        }\n      }\n    }\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(\n          String\n        ).join(',')}.`\n      )\n    }\n    if (priority && loading === 'lazy') {\n      throw new Error(\n        `Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`\n      )\n    }\n    if (\n      placeholder !== 'empty' &&\n      placeholder !== 'blur' &&\n      !placeholder.startsWith('data:image/')\n    ) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"placeholder\" property \"${placeholder}\".`\n      )\n    }\n    if (placeholder !== 'empty') {\n      if (widthInt && heightInt && widthInt * heightInt < 1600) {\n        warnOnce(\n          `Image with src \"${src}\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.`\n        )\n      }\n    }\n    if (placeholder === 'blur' && !blurDataURL) {\n      const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif'] // should match next-image-loader\n\n      throw new Error(\n        `Image with src \"${src}\" has \"placeholder='blur'\" property but is missing the \"blurDataURL\" property.\n        Possible solutions:\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\n          - Change the \"src\" property to a static import with one of the supported file types: ${VALID_BLUR_EXT.join(\n            ','\n          )} (animated images not supported)\n          - Remove the \"placeholder\" property, effectively no blur effect\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url`\n      )\n    }\n    if ('ref' in rest) {\n      warnOnce(\n        `Image with src \"${src}\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.`\n      )\n    }\n\n    if (!unoptimized && !isDefaultLoader) {\n      const urlStr = loader({\n        config,\n        src,\n        width: widthInt || 400,\n        quality: qualityInt || 75,\n      })\n      let url: URL | undefined\n      try {\n        url = new URL(urlStr)\n      } catch (err) {}\n      if (urlStr === src || (url && url.pathname === src && !url.search)) {\n        warnOnce(\n          `Image with src \"${src}\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.` +\n            `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width`\n        )\n      }\n    }\n\n    if (onLoadingComplete) {\n      warnOnce(\n        `Image with src \"${src}\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.`\n      )\n    }\n\n    for (const [legacyKey, legacyValue] of Object.entries({\n      layout,\n      objectFit,\n      objectPosition,\n      lazyBoundary,\n      lazyRoot,\n    })) {\n      if (legacyValue) {\n        warnOnce(\n          `Image with src \"${src}\" has legacy prop \"${legacyKey}\". Did you forget to run the codemod?` +\n            `\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13`\n        )\n      }\n    }\n\n    if (\n      typeof window !== 'undefined' &&\n      !perfObserver &&\n      window.PerformanceObserver\n    ) {\n      perfObserver = new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n          const imgSrc = entry?.element?.src || ''\n          const lcpImage = allImgs.get(imgSrc)\n          if (\n            lcpImage &&\n            !lcpImage.priority &&\n            lcpImage.placeholder === 'empty' &&\n            !lcpImage.src.startsWith('data:') &&\n            !lcpImage.src.startsWith('blob:')\n          ) {\n            // https://web.dev/lcp/#measure-lcp-in-javascript\n            warnOnce(\n              `Image with src \"${lcpImage.src}\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.` +\n                `\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority`\n            )\n          }\n        }\n      })\n      try {\n        perfObserver.observe({\n          type: 'largest-contentful-paint',\n          buffered: true,\n        })\n      } catch (err) {\n        // Log error but don't crash the app\n        console.error(err)\n      }\n    }\n  }\n  const imgStyle = Object.assign(\n    fill\n      ? {\n          position: 'absolute',\n          height: '100%',\n          width: '100%',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          objectFit,\n          objectPosition,\n        }\n      : {},\n    showAltText ? {} : { color: 'transparent' },\n    style\n  )\n\n  const backgroundImage =\n    !blurComplete && placeholder !== 'empty'\n      ? placeholder === 'blur'\n        ? `url(\"data:image/svg+xml;charset=utf-8,${getImageBlurSvg({\n            widthInt,\n            heightInt,\n            blurWidth,\n            blurHeight,\n            blurDataURL: blurDataURL || '', // assume not undefined\n            objectFit: imgStyle.objectFit,\n          })}\")`\n        : `url(\"${placeholder}\")` // assume `data:image/`\n      : null\n\n  let placeholderStyle = backgroundImage\n    ? {\n        backgroundSize: imgStyle.objectFit || 'cover',\n        backgroundPosition: imgStyle.objectPosition || '50% 50%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage,\n      }\n    : {}\n\n  if (process.env.NODE_ENV === 'development') {\n    if (\n      placeholderStyle.backgroundImage &&\n      placeholder === 'blur' &&\n      blurDataURL?.startsWith('/')\n    ) {\n      // During `next dev`, we don't want to generate blur placeholders with webpack\n      // because it can delay starting the dev server. Instead, `next-image-loader.js`\n      // will inline a special url to lazily generate the blur placeholder at request time.\n      placeholderStyle.backgroundImage = `url(\"${blurDataURL}\")`\n    }\n  }\n\n  const imgAttributes = generateImgAttrs({\n    config,\n    src,\n    unoptimized,\n    width: widthInt,\n    quality: qualityInt,\n    sizes,\n    loader,\n  })\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      let fullUrl: URL\n      try {\n        fullUrl = new URL(imgAttributes.src)\n      } catch (e) {\n        fullUrl = new URL(imgAttributes.src, window.location.href)\n      }\n      allImgs.set(fullUrl.href, { src, priority, placeholder })\n    }\n  }\n\n  const props: ImgProps = {\n    ...rest,\n    loading: isLazy ? 'lazy' : loading,\n    fetchPriority,\n    width: widthInt,\n    height: heightInt,\n    decoding,\n    className,\n    style: { ...imgStyle, ...placeholderStyle },\n    sizes: imgAttributes.sizes,\n    srcSet: imgAttributes.srcSet,\n    src: overrideSrc || imgAttributes.src,\n  }\n  const meta = { unoptimized, priority, placeholder, fill }\n  return { props, meta }\n}\n"]},"metadata":{},"sourceType":"script"}