{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nlet globalId = 0;\n\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n} // downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseId = React['useId'.toString()];\n/**\r\n *\r\n * @example <div id={useId()} />\r\n * @param idOverride\r\n * @returns {string}\r\n */\n\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}","map":{"version":3,"names":["React","globalId","useGlobalId","idOverride","defaultId","setDefaultId","useState","id","useEffect","maybeReactUseId","toString","useId","undefined","reactId"],"sources":["C:/OtpishiAI/node_modules/@mui/utils/esm/useId/useId.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nlet globalId = 0;\r\nfunction useGlobalId(idOverride) {\r\n  const [defaultId, setDefaultId] = React.useState(idOverride);\r\n  const id = idOverride || defaultId;\r\n  React.useEffect(() => {\r\n    if (defaultId == null) {\r\n      // Fallback to this default id when possible.\r\n      // Use the incrementing value for client-side rendering only.\r\n      // We can't use it server-side.\r\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\r\n      globalId += 1;\r\n      setDefaultId(`mui-${globalId}`);\r\n    }\r\n  }, [defaultId]);\r\n  return id;\r\n}\r\n\r\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\r\nconst maybeReactUseId = React['useId'.toString()];\r\n/**\r\n *\r\n * @example <div id={useId()} />\r\n * @param idOverride\r\n * @returns {string}\r\n */\r\nexport default function useId(idOverride) {\r\n  if (maybeReactUseId !== undefined) {\r\n    const reactId = maybeReactUseId();\r\n    return idOverride != null ? idOverride : reactId;\r\n  }\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\r\n  return useGlobalId(idOverride);\r\n}"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAIC,QAAQ,GAAG,CAAf;;AACA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;EAC/B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAeH,UAAf,CAAlC;EACA,MAAMI,EAAE,GAAGJ,UAAU,IAAIC,SAAzB;EACAJ,KAAK,CAACQ,SAAN,CAAgB,MAAM;IACpB,IAAIJ,SAAS,IAAI,IAAjB,EAAuB;MACrB;MACA;MACA;MACA;MACAH,QAAQ,IAAI,CAAZ;MACAI,YAAY,CAAE,OAAMJ,QAAS,EAAjB,CAAZ;IACD;EACF,CATD,EASG,CAACG,SAAD,CATH;EAUA,OAAOG,EAAP;AACD,C,CAED;;;AACA,MAAME,eAAe,GAAGT,KAAK,CAAC,QAAQU,QAAR,EAAD,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,KAAT,CAAeR,UAAf,EAA2B;EACxC,IAAIM,eAAe,KAAKG,SAAxB,EAAmC;IACjC,MAAMC,OAAO,GAAGJ,eAAe,EAA/B;IACA,OAAON,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkCU,OAAzC;EACD,CAJuC,CAKxC;;;EACA,OAAOX,WAAW,CAACC,UAAD,CAAlB;AACD"},"metadata":{},"sourceType":"module"}