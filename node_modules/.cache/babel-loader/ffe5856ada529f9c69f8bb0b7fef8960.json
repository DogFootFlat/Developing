{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  hasLocalMatch: null,\n  matchLocalPattern: null\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  hasLocalMatch: function () {\n    return hasLocalMatch;\n  },\n  matchLocalPattern: function () {\n    return matchLocalPattern;\n  }\n});\n\nconst _picomatch = require(\"next/dist/compiled/picomatch\");\n\nfunction matchLocalPattern(pattern, url) {\n  if (pattern.search !== undefined) {\n    if (pattern.search !== url.search) {\n      return false;\n    }\n  }\n\n  var _pattern_pathname;\n\n  if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {\n    dot: true\n  }).test(url.pathname)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction hasLocalMatch(localPatterns, urlPathAndQuery) {\n  if (!localPatterns) {\n    // if the user didn't define \"localPatterns\", we allow all local images\n    return true;\n  }\n\n  const url = new URL(urlPathAndQuery, 'http://n');\n  return localPatterns.some(p => matchLocalPattern(p, url));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;EAkBgBA,aAAa;WAAbA;;EAdAC,iBAAiB;WAAjBA;;;;2BAHO;;AAGhB,SAASA,iBAAT,CAA2BC,OAA3B,EAAkDC,GAAlD,EAA0D;EAC/D,IAAID,QAAQE,MAARF,KAAmBG,SAAvB,EAAkC;IAChC,IAAIH,QAAQE,MAARF,KAAmBC,IAAIC,MAA3B,EAAmC;MACjC,OAAO,KAAP;IACF;EACF;;MAEYF;;EAAZ,IAAI,CAACI,uBAAOJ,6BAAQK,QAARL,KAAgB,IAAhBA,uBAAoB,IAA3BI,EAAiC;IAAEE,KAAK;EAAP,CAAjCF,EAAgDG,IAAhDH,CAAqDH,IAAII,QAAzDD,CAAL,EAAyE;IACvE,OAAO,KAAP;EACF;;EAEA,OAAO,IAAP;AACF;;AAEO,SAASN,aAAT,CACLU,aADK,EAELC,eAFK,EAEkB;EAEvB,IAAI,CAACD,aAAL,EAAoB;IAClB;IACA,OAAO,IAAP;EACF;;EACA,MAAMP,MAAM,IAAIS,GAAJ,CAAQD,eAAR,EAAyB,UAAzB,CAAZ;EACA,OAAOD,cAAcG,IAAdH,CAAoBI,CAAD,IAAOb,kBAAkBa,CAAlBb,EAAqBE,GAArBF,CAA1BS,CAAP;AACF","names":["hasLocalMatch","matchLocalPattern","pattern","url","search","undefined","makeRe","pathname","dot","test","localPatterns","urlPathAndQuery","URL","some","p"],"sources":["C:\\OtpishiAI\\node_modules\\next\\src\\shared\\lib\\match-local-pattern.ts"],"sourcesContent":["import type { LocalPattern } from './image-config'\nimport { makeRe } from 'next/dist/compiled/picomatch'\n\n// Modifying this function should also modify writeImagesManifest()\nexport function matchLocalPattern(pattern: LocalPattern, url: URL): boolean {\n  if (pattern.search !== undefined) {\n    if (pattern.search !== url.search) {\n      return false\n    }\n  }\n\n  if (!makeRe(pattern.pathname ?? '**', { dot: true }).test(url.pathname)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hasLocalMatch(\n  localPatterns: LocalPattern[] | undefined,\n  urlPathAndQuery: string\n): boolean {\n  if (!localPatterns) {\n    // if the user didn't define \"localPatterns\", we allow all local images\n    return true\n  }\n  const url = new URL(urlPathAndQuery, 'http://n')\n  return localPatterns.some((p) => matchLocalPattern(p, url))\n}\n"]},"metadata":{},"sourceType":"script"}